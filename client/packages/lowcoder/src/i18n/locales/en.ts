import table from "./componentDocExtra/table.md?url";

export const en = {
  productName: "Lowcoder",
  productDesc: "Build internal tools fast, with no limitations",
  notSupportedBrowser:
    "Your current browser may have compatibility issues. For a better user experience, it is recommended to use the latest version of the Chrome browser.",
  create: "Create",
  move: "Move",
  addItem: "Add",
  newItem: "New",
  copy: "Copy",
  rename: "Rename",
  delete: "Delete",
  deletePermanently: "Delete",
  remove: "Remove",
  recover: "Recover",
  edit: "Edit",
  view: "View",
  value: "Value",
  data: "Data",
  information: "Information",
  success: "Success",
  warning: "Warning",
  error: "Error",
  reference: "Reference",
  text: "Text",
  label: "Label",
  color: "Color",
  form: "Form",
  menu: "Menu",
  menuItem: "Menu item",
  ok: "OK",
  cancel: "Cancel",
  finish: "Finish",
  reset: "Reset",
  icon: "Icon",
  code: "Code",
  title: "Title",
  emptyContent: "Empty content",
  more: "More",
  search: "Search",
  back: "Back",
  accessControl: " Access Control",
  copySuccess: "Copied",
  copyError: "Copy error",
  api: {
    publishSuccess: "Published",
    recoverFailed: "Recover failed",
    needUpdate: "Your current version is too old, please upgrade to the latest version.",
  },
  codeEditor: {
    notSupportAutoFormat: "Current code editor not supports auto formatting",
    fold: "Fold",
  },
  exportMethod: {
    setDesc: "Set property: {property}",
    clearDesc: "Clear property: {property}",
    resetDesc: "Reset property: {property} to default value",
  },
  method: {
    focus: "Set focus",
    focusOptions: "Focus options. See HTMLElement.focus()",
    blur: "Remove focus",
    click: "Click",
    select: "Select all the text",
    setSelectionRange: "Set the start and end positions of the current text selection",
    selectionStart: "The 0-based index of the first selected character.",
    selectionEnd: "The 0-based index of the character after the last selected character.",
    setRangeText: "Replace a range of text",
    replacement: "The string to insert.",
    replaceStart: "The 0-based index of the first character to replace.",
    replaceEnd: "The 0-based index of the character after the last character to replace.",
  },
  errorBoundary: {
    encounterError: "Loading component failed. Please check your configuration. ",
    clickToReload: "Click to reload",
    errorMsg: "Error: ",
  },
  imgUpload: {
    notSupportError: "Only support upload {types} image",
    exceedSizeError: "Image size should not exceeds {size}",
  },
  gridCompOperator: {
    notSupport: "Not support",
    selectAtLeastOneComponent: "Please select at least one component",
    selectCompFirst: "Please select components before copy",
    noContainerSelected: "[bug] No selected container",
    deleteCompsSuccess: "Delete success. You can use {undoKey} to undo.",
    deleteCompsTitle: "Delete components",
    deleteCompsBody: "Are you sure you want to delete {compNum} selected components?",
    cutCompsSuccess: "Cut success. You can use {pasteKey} to paste, or use {undoKey} to undo.",
  },
  leftPanel: {
    queries: "Queries",
    globals: "Globals",
    propTipsArr: "{num} items",
    propTips: "{num} keys",
    propTipArr: "{num} item",
    propTip: "{num} key",
    stateTab: "State",
    settingsTab: "Settings",
    toolbarTitle: "Other",
    toolbarPreload: "Scripts and style",
    components: "Components",
    modals: "Modals",
    expandTip: "Click to expand {component}'s data",
    collapseTip: "Click to collapse {component}'s data",
  },
  bottomPanel: {
    title: "Queries",
    run: "Run",
    noSelectedQuery: "No selected query",
    metaData: "Metadata",
    noMetadata: "No metadata",
    metaSearchPlaceholder: "Search metadata",
    allData: "All tables",
  },
  rightPanel: {
    propertyTab: "Properties",
    noSelectedComps: "No components selected. Click to select one.",
    createTab: "Insert",
    searchPlaceHolder: "Search components or modules",
    uiComponentTab: "Components",
    extensionTab: "Extensions",
    modulesTab: "Modules",
    moduleListTitle: "Modules",
    pluginListTitle: "Plugins",
    emptyModules: "Modules are reusable groups of components and queries.",
    searchNotFound: "Can't find a suitable component? Submit an issue",
    emptyPlugins: "No plugins added.",
    contactUs: "Contact us",
    issueHere: " here.",
  },
  prop: {
    expand: "Expand",
    columns: "Columns",
    rowSelection: "Row selection",
    toolbar: "Toolbar",
    pagination: "Pagination",
    logo: "Logo",
    style: "Style",
    inputs: "Inputs",
    meta: "Meta data",
    hide: "Hidden",
    loading: "Loading",
    disabled: "Disabled",
    placeholder: "Placeholder",
    showClear: "Show clear button",
    showSearch: "Searchable",
    defaultValue: "Default value",
    required: "Required field",
    readOnly: "Read only",
    readOnlyTooltip:
      "Read only component looks same as normal component, it is focusable and selectable but cannot be modified",
    minimum: "Minimum",
    maximum: "Maximum",
    regex: "Regex",
    minLength: "Min length",
    maxLength: "Max length",
    height: "Height",
    width: "Width",
    selectApp: "App",
    showCount: "Show count",
    textType: "Text type",
    customRule: "Custom rule",
    customRuleTooltip:
      "If the result is non-empty string, it is an error message. If empty or null, the validation passes. Example: ",
    manual: "Manual",
    map: "Mapped",
    use12Hours: "Use 12-hours",
    hourStep: "Hour step",
    minuteStep: "Minute step",
    secondStep: "Second step",
    minDate: "Min date",
    maxDate: "Max date",
    minTime: "Min time",
    maxTime: "Max time",
    type: "Type",
    showLabel: "Show label",
    showHeader: "Show header",
    showBody: "Show body",
    showFooter: "Show footer",
    maskClosable: "Click the mask to close",
    showMask: "Show mask",
    showCloseButton: "Show close button",
    budgeType: "Budge type",
    budgeCount: "Budge count",
    budgeSize: "Budge size",
    budgeSizeDefault: "default",
    budgeSizeSmall: "Small",
    overflowCount: "Overflow count",
    budgeTitle: "Budge title",
    dot: "Dot",
    number: "Number",
  },
  autoHeightProp: {
    auto: "Auto",
    fixed: "Fixed",
  },
  labelProp: {
    text: "Label",
    tooltip: "Tooltip",
    position: "Position",
    left: "Left",
    top: "Top",
    align: "Alignment",
    width: "Width",
    widthTooltip:
      "Width of the label. It supports percentage of the component width (%), pixels (px)",
  },
  eventHandler: {
    eventHandlers: "Event handlers",
    emptyEventHandlers: "No event handlers",
    incomplete: "Incomplete selection",
    inlineEventTitle: "On {eventName}",
    event: "Event",
    action: "Action",
    noSelect: "No select",
    runQuery: "Run query",
    selectQuery: "Select query",
    controlComp: "Control component",
    runScript: "Run JavaScript",
    runScriptPlaceHolder: "Write code here",
    component: "Component",
    method: "Method",
    setTempState: "Set temporary state",
    state: "State",
    triggerModuleEvent: "Trigger module event",
    moduleEvent: "Module event",
    goToApp: "Go to app",
    queryParams: "Query params",
    hashParams: "Hash params",
    showNotification: "Show notification",
    text: "Text",
    level: "Level",
    duration: "Duration",
    notifyDurationTooltip:
      "Time unit can be s(second, default), ms (millisecond). Max duration is {max} seconds",
    goToURL: "Go to URL",
    openInNewTab: "Open in a new tab",
    copyToClipboard: "Copy to clipboard",
    copyToClipboardValue: "Value",
    export: "Export data",
    exportNoFileType: "No select (optional)",
    fileName: "File name",
    fileNameTooltip: "Support extension to specify the file type, like image.png.",
    fileType: "File type",
    condition: "Only run when",
    conditionTooltip: "Only run the event handler when this condition evaluates to 'true'",
    debounce: "Debounce",
    throttle: "Throttle",
    slowdownTooltip:
      "Use debounce or throttle to control how often the action is triggered. Time unit can be ms (millisecond, default), s (second).",
    notHandledError: "Not handled",
    currentApp: "Current",
    set: "Set",
    clear: "Clear",
    reset: "Reset",
  },
  event: {
    submit: "Submit",
    submitDesc: "Triggers on submit",
    change: "Change",
    changeDesc: "Triggers on value changes",
    focus: "Focus",
    focusDesc: "Triggers on focus",
    blur: "Blur",
    blurDesc: "Triggers on blur",
    click: "Click",
    clickDesc: "Triggers on click",
    close: "Close",
    closeDesc: "Triggers on close",
    parse: "Parse",
    parseDesc: "Triggers on parse",
    success: "Success",
    successDesc: "Triggers on success",
    mention: "mention",
    mentionDesc: "Triggers on mention",
    delete: "Delete",
    deleteDesc: "Triggers on delete",
    addedMarker: "added Marker",
    addedMarkerDesc: "Allow left mouse click to add markers",
    delteMarker: "delte Marker",
    delteMarkerDesc: "Allow right mouse click to delete markers",
    clickMarker: "click Marker",
    clickMarkerDesc: "Triggers markers on click",
    amapMoveEnd: "map move end",
    amapMoveEndDesc: "Triggers map move end",
    refresh: "Refresh",
    refreshDesc: "Triggers on refresh",
  },
  themeDetail: {
    primary: "Brand color",
    primaryDesc: "Most components use the default primary color",
    textDark: "Text dark color",
    textDarkDesc: "Apply when the background color is light",
    textLight: "Text light color",
    textLightDesc: "Apply when the background color is dark",
    canvas: "Canvas color",
    canvasDesc: "The default background color of the app",
    primarySurface: "Container color",
    primarySurfaceDesc: "The default background color for components such as tables",
    borderRadius: "Border radius",
    borderRadiusDesc: "Most components use the default border radius",
    chart: "Chart style",
    chartDesc: "Input Echarts",
    echartsJson: "Theme JSON",
    margin: "Margin",
    marginDesc: "The default margin is typically used for most components",
    padding: "Padding",
    paddingDesc: "The default padding is typically used for most components",
    containerheaderpadding: "Header Padding",
    containerheaderpaddingDesc: "The default headerpadding is typically used for most components",
    //Added By Aqib Mirza
    gridColumns: "Grid Columns",
    gridColumnsDesc:
      "The default number of columns is typically used for most containers",
  },
  style: {
    resetTooltip: "Reset styles. Delete the input's value to reset an individual field.",
    contrastText: "Contrast text color",
    generated: "Generated",
    customize: "Customize",
    staticText: "Static text",
    accent: "Accent",
    validate: "Validation message",
    border: "Border",
    borderRadius: "Border radius",
    background: "Background",
    headerBackground: "Header background",
    footerBackground: "Footer background",
    fill: "Fill",
    track: "Track",
    links: "Links",
    thumb: "Thumb",
    thumbBorder: "Thumb border",
    checked: "Checked",
    unchecked: "Unchecked",
    handle: "Handle",
    tags: "Tags",
    tagsText: "Tags text",
    multiIcon: "Multiselect icon",
    tabText: "Tab text",
    tabAccent: "Tab accent",
    tabActiveColor: "Tab active color",
    checkedBackground: "Checked background",
    uncheckedBackground: "Unchecked background",
    uncheckedBorder: "Unchecked border",
    indicatorBackground: "Indicator background",
    tableCellText: "Cell text",
    selectedRowBackground: "Selected row background",
    hoverRowBackground: "Hover row background",
    alternateRowBackground: "Alternate row background",
    tableHeaderBackground: "Header background",
    tableHeaderText: "Header text",
    toolbarBackground: "Toolbar background",
    toolbarText: "Toolbar text",
    pen: "Pen",
    footerIcon: "Footer icon",
    tips: "Tips",
    margin: "Margin",
    padding: "Padding",
    marginLeft: "Margin Left",
    marginRight: "Margin Right",
    marginTop: "Margin Top",
    marginBottom: "Margin Bottom",
    containerheaderpadding: "Header Padding",
    containerfooterpadding: "Footer Padding",
    containerbodypadding: "Body Padding",
    minWidth: "Minimum Width",
    BackgroundImage: "Background Image",
  },
  export: {
    hiddenDesc: "If true, the component is hidden",
    disabledDesc: "If true, the component will be greyed out and non-interactive",
    visibleDesc: "If true, the component is visible",
    inputValueDesc: "Current value of the input",
    selectObjectDesc: "selected object value",
    invalidDesc: "Whether the value is invalid",
    placeholderDesc: "Text to display when no value is set",
    requiredDesc: "If true, a valid value must be provided",
    submitDesc: "Submit Form",
    richTextEditorValueDesc: "Current value of the Editor",
    richTextEditorReadOnlyDesc: "If true, the Editor is read-only",
    richTextEditorHideToolBarDesc: "If true, thr toolbar is hidden",
    jsonEditorDesc: "Current json data",
    sliderValueDesc: "Currently selected value",
    sliderMaxValueDesc: "The maximum value of the current interval",
    sliderMinValueDesc: "The minimum value of the current interval",
    sliderStartDesc: "The value of the currently selected starting point",
    sliderEndDesc: "The value of the currently selected end point",
    ratingValueDesc: "The currently selected score",
    ratingMaxDesc: "The maximum score currently set",
    datePickerValueDesc: "Currently selected date",
    datePickerFormattedValueDesc: "Formatted selected date according to the specified format",
    datePickerTimestampDesc: "The currently selected timestamp of the date (s)",
    weekPickerValueDesc: "The currently selected week in the year",
    monthPickerValueDesc: "The currently selected month",
    monthPickerDaysInMonthDesc: "The currently days in the month",
    quarterPickerDaysInMonthDesc: "The currently selected quarter",
    yearPickerDaysInMonthDesc: "The currently selected year",
    dateRangeStartDesc: "Currently selected start date",
    dateRangeEndDesc: "Currently selected end date",
    dateRangeStartTimestampDesc: "The currently selected timestamp of the start date (s)",
    dateRangeEndTimestampDesc: "The currently selected timestamp of the end date (s)",
    dateRangeFormattedValueDesc: "Formatted selected date according to the specified format",
    dateRangeFormattedStartValueDesc: "Formatted start date according to the specified format",
    dateRangeFormattedEndValueDesc: "Formatted end date according to the specified format",
    timePickerValueDesc: "Currently selected time",
    timePickerFormattedValueDesc: "Formatted selected time according to the specified format",
    timeRangeStartDesc: "Currently selected start time",
    timeRangeEndDesc: "Currently selected end time",
    timeRangeFormattedValueDesc: "Formatted selected time according to the specified format",
    timeRangeFormattedStartValueDesc: "Formatted start time according to the specified format",
    timeRangeFormattedEndValueDesc: "Formatted end time according to the specified format",
  },
  validationDesc: {
    email: "Please enter a valid email address",
    url: "Please enter a valid URL",
    phone: "Please enter an 11 digit phone number",
    account: "Starting with a letter, allowing 5-16 characters, and allowing alphanumeric underscores",
    regex: "Please enter the content that matches the regex",
    maxLength:
      "Excessive number of characters, current length {length}, maximum length {maxLength}",
    minLength:
      "Insufficient number of characters, current length {length}, minimum length {minLength}",
    maxValue: "Greater than the maximum, current {value}, maximum {max}",
    minValue: "Less than the minimum, current {value}, minimum {min}",
    maxTime: "Greater than the maximum time, current time {time}, the maximum time {maxTime}",
    minTime: "Less than the minimum time, current time {time}, the minimum time {minTime}",
    maxDate: "Greater than maximum date, current time {date}, maximum date {maxDate}",
    minDate: "Less than minimum date, current time {date}, minimum date {minDate}",
  },
  query: {
    noQueries: "No queries available. ",
    queryTutorialButton: "View {value} documents",
    datasource: "Data sources",
    newDatasource: "New data source",
    generalTab: "General",
    notificationTab: "Notification",
    advancedTab: "Advanced",
    showFailNotification: "Show notification on failure",
    failCondition: "Failure conditions",
    failConditionTooltip1: "Customizes failure condition and corresponding notification.",
    failConditionTooltip2:
      "If any condition returns true, the query will be marked as failure and triggers corresponding notification.",
    showSuccessNotification: "Show notification on success",
    successMessageLabel: "Success message",
    successMessage: "Run success",
    notifyDuration: "Duration",
    notifyDurationTooltip:
      "Notification duration. Time unit can be s(second, default), ms(millisecond). Default value is {default}s. Maximum is {max}s.",
    successMessageWithName: "{name} run success",
    failMessageWithName: "{name} run failed: {result}",
    showConfirmationModal: "Show a confirmation modal before running",
    confirmationMessageLabel: "Confirmation message",
    confirmationMessage: "Are you sure you want to run this query?",
    newQuery: "New query",
    newFolder: "New Folder",
    recentlyUsed: "Recently used",
    folder: "Folder",
    folderNotEmpty: "Folder is not empty",
    dataResponder: "Data responder",
    tempState: "Temporary state",
    transformer: "Transformer",
    quickRestAPI: "REST Query",
    quickStreamAPI: "Stream Query",
    quickGraphql: "GraphQL Query",
    lowcoderAPI: "Lowcoder API",
    executeJSCode: "Run JavaScript Code",
    importFromQueryLibrary: "Import from Query Library",
    importFromFile: "Import from File",
    triggerType: "Triggered when",
    triggerTypeAuto: "Inputs change or on page load",
    triggerTypePageLoad: "On page load",
    triggerTypeManual: "Manually invoked",
    httpMethod: "Http Method",
    body: "Body",
    URL: "URL",
    headers: "Headers",
    Parameters: "Parameters",
    Commands: "Commands",
    collection: "Collection",
    query: "Query",
    limit: "Limit",
    projection: "Projection",
    projectionDes: "Select a field and set it to 1 to output",
    skip: "Skip",
    sort: "Sort",
    sortDes: "1: ascending order; 0: descending order",
    arrayPipelines: "Array pipelines",
    chooseDataSource: "Data source",
    method: "Method",
    updateExceptionDataSourceTitle: "Update failing data source",
    updateExceptionDataSourceContent:
      "Update the following query with the same failing data source:",
    update: "Update",
    disablePreparedStatement: "Disable prepared statements",
    disablePreparedStatementTooltip:
      "Disabling prepared statements can generate SQL dynamically, but risks SQL injection",
    timeout: "Timeout after",
    timeoutTooltip:
      "Default unit: ms, supported input units: ms, s.\n" +
      "Default value: {defaultSeconds} seconds\n" +
      "Maximum value: {maxSeconds} seconds.\n" +
      "\n" +
      "E.g. 300 (i.e. 300ms), 800ms, 5s.",
    periodic: "Run this query periodically",
    periodicTime: "Period",
    periodicTimeTooltip:
      "Period between successive executions. \n" +
      "Default unit: ms, supported input units: ms, s.\n" +
      "Minimum value: 100ms, periodical execution will be disabled for values below that.\n" +
      "\n" +
      "E.g. 300 (i.e. 300ms), 800ms, 5s.",
    cancelPrevious: "Ignore the results of previous uncompleted executions.",
    cancelPreviousTooltip: "",

    dataSourceStatusError:
      "If a new execution is triggered, the result of the previous uncompleted executions will be ignored if the previous executions did not complete, and the ignored executions will not trigger the event list of the query.",
    success: "Success",
    fail: "Failure",
    successDesc: "Triggered when the execution success",
    failDesc: "Triggered when the execution failed",
    fixedDelayError: "Query not run",
    execSuccess: "run success",
    execFail: "run failed",
    execIgnored: "The results of this query was ignored.",
    deleteSuccessMessage: "Successfully deleted. You can use {undoKey} to undo.",
    dataExportDesc: "Data obtained by the current query",
    codeExportDesc: "Current query status code",
    successExportDesc: "Whether the current query was executed successfully",
    messageExportDesc: "Information returned by the current query",
    extraExportDesc: "Other data in the current query",
    isFetchingExportDesc: "Is the current query in the request",
    runTimeExportDesc: "Current query execution time (ms)",
    latestEndTimeExportDesc: "Last run time",
    triggerTypeExportDesc: "Trigger type",
    chooseResource: "Choose a resource",
    createDataSource: "Create a new data source",
    editDataSource: "Edit",
    datasourceName: "Name",
    datasourceNameRuleMessage: "Please enter a data source name",
    generalSetting: "General settings",
    advancedSetting: "Advanced settings",
    port: "Port",
    portRequiredMessage: "Please enter a port",
    portErrorMessage: "Please enter a correct port",
    connectionType: "Connection Type",
    regular: "Regular",
    host: "Host",
    hostRequiredMessage: "Please enter a host domain name or IP address",
    userName: "User name",
    password: "Password",
    encryptedServer: "-------- Encrypted on the server side --------",
    uriRequiredMessage: "Please enter a URI",
    urlRequiredMessage: "Please enter a URL",
    uriErrorMessage: "Please enter a correct URI",
    urlErrorMessage: "Please enter a correct URL",
    httpRequiredMessage: "Please enter http:// or https://",
    databaseName: "Database name",
    databaseNameRequiredMessage: "Please enter a database name",
    useSSL: "Use SSL",
    userNameRequiredMessage: "Please enter your name",
    passwordRequiredMessage: "Please enter your password",
    authentication: "Authentication",
    authenticationType: "Authentication Type",
    sslCertVerificationType: "SSL Cert Verification",
    sslCertVerificationTypeDefault: "Verify CA Cert",
    sslCertVerificationTypeSelf: "Verify Self Signed Cert",
    sslCertVerificationTypeDisabled: "Disabled",
    selfSignedCert: "Self-signed Cert",
    selfSignedCertRequireMsg: "Please enter your Certificate",
    enableTurnOffPreparedStatement: "Enable toggling prepared statements for queries",
    enableTurnOffPreparedStatementTooltip:
      "You can enable or disable prepared statements in query Advanced tab",
    serviceName: "Service name",
    serviceNameRequiredMessage: "Please enter your service name",
    useSID: "Use SID",
    connectSuccessfully: "Connection successful",
    saveSuccessfully: "Saved",
    database: "Database",
    authSource: "Authentication DataBase",
    cloudHosting:
      "Cloud-hosted Lowcoder cannot access your local services with 127.0.0.1 or localhost. Try to connect public network data sources or use a reverse proxy fronting your private services.",
    notCloudHosting:
      "For docker hosted deployment, Lowcoder uses bridge networks, so 127.0.0.1 and localhost are invalid for host addresses. To visit data sources on your local machine, please refer to this",
    howToAccessHostDocLink: "How do I access the host API/DB",
    returnList: "Return",
    chooseDatasourceType: "Choose data source type",
    viewDocuments: "Documents",
    testConnection: "Test connection",
    save: "Save",
    whitelist: "Allowlist",
    whitelistTooltip:
      "Add the following IP addresses of Lowcoder to your data source allowlist when needed.",
    address: "Address: ",
    nameExists: "Name {name} already exist",
    jsQueryDocLink: "About JavaScript query",
    dynamicDataSourceConfigLoadingText: "Extra datasource config loading...",
    dynamicDataSourceConfigErrText: "Fail to load extra datasource config.",
    retry: "Retry",
  },
  sqlQuery: {
    keyValuePairs: "Key-value pairs",
    object: "Object",
    allowMultiModify: "Allow modify multi-row",
    allowMultiModifyTooltip:
      "If this parameter is selected, all rows that meet the conditions are operated. Otherwise, only the first row that meets the conditions is operated",
    array: "Array",
    insertList: "Insert list",
    insertListTooltip: "Value inserted when it does not exist",
    filterRule: "Filter rule",
    updateList: "Update list",
    updateListTooltip:
      "Values updated as they exist can be overridden by the same insertion list values",
    sqlMode: "SQL mode",
    guiMode: "GUI mode",
    operation: "Operation",
    insert: "Insert",
    upsert: "Insert, update if conflict",
    update: "Update",
    delete: "Delete",
    bulkInsert: "Bulk insert",
    bulkUpdate: "Bulk update",
    table: "Table",
    primaryKeyColumn: "Primary key column",
  },
  EsQuery: {
    rawCommand: "Raw command",
    queryTutorialButton: "View Elasticsearch API documents",
    request: "Request",
  },
  googleSheets: {
    rowIndex: "Row Index",
    spreadsheetId: "Spreadsheet",
    sheetName: "Sheet Name",
    readData: "Read Data",
    appendData: "Append Row",
    updateData: "Update Row",
    deleteData: "Delete Row",
    clearData: "Clear Row",
    serviceAccountRequireMessage: "Please enter your Service Account",
    ASC: "ASC",
    DESC: "DESC",
    sort: "Sort",
    sortPlaceholder: "Name",
  },
  queryLibrary: {
    export: "Export to JSON",
    noInput: "The current query has no input",
    inputName: "Name",
    inputDesc: "Description",
    emptyInputs: "No inputs",
    clickToAdd: "Add",
    chooseQuery: "Choose query",
    viewQuery: "View query",
    chooseVersion: "Choose version",
    latest: "Latest",
    publish: "Publish",
    historyVersion: "History version",
    deleteQueryLabel: "Delete query",
    deleteQueryContent: "The query can't be recovered after being deleted. Delete the query?",
    run: "Run",
    readOnly: "Read only",
    exit: "Exit",
    recoverAppSnapshotContent: "Restore the current query to the version {version}",
    searchPlaceholder: "Search query",
    allQuery: "All queries",
    deleteQueryTitle: "Delete query",
    unnamed: "Unnamed",
    publishNewVersion: "Publish new version",
    publishSuccess: "Published",
    version: "Version",
    desc: "Description",
  },
  snowflake: {
    accountIdentifierTooltip: "See ",
    extParamsTooltip: "Configure more connection parameters",
  },
  lowcoderQuery: {
    queryOrgUsers: "Query workspace users",
  },
  redisQuery: {
    rawCommand: "Raw command",
    command: "Command",
    queryTutorial: "View Redis Commands documents",
  },
  httpQuery: {
    bodyFormDataTooltip:
      "If you select {type}, the format of value should be {object}. Example: {example}",
    text: "Text",
    file: "File",
    extraBodyTooltip:
      "Key values in Extra body will be appended in body with JSON or Form Data types",
    forwardCookies: "Forward cookies",
    forwardAllCookies: "Forward all cookies",
  },
  smtpQuery: {
    attachment: "Attachment",
    attachmentTooltip: "Can use with file upload component, need convert data to: ",
    MIMETypeUrl: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types",
    sender: "Sender",
    recipient: "Recipient",
    carbonCopy: "Carbon copy",
    blindCarbonCopy: "Blind carbon copy",
    subject: "Subject",
    content: "Content",
    contentTooltip: "Support for input text or HTML",
  },
  uiCompCategory: {
    common: "Commonly used",
    dataInputText: "Text inputs",
    dataInputNumber: "Number inputs",
    dataInputSelect: "Select inputs",
    dataInputDate: "Date and time inputs",
    button: "Buttons",
    dataDisplay: "Data",
    container: "Containers and forms",
    other: "Other",
  },
  uiComp: {
    inputCompName: "Input",
    inputCompDesc: "Input component",
    inputCompKeywords: "text",
    textAreaCompName: "Text Area",
    textAreaCompDesc: "Text Area component",
    textAreaCompKeywords: "",
    passwordCompName: "Password",
    passwordCompDesc: "Password component",
    passwordCompKeywords: "",
    richTextEditorCompName: "Rich Text Editor",
    richTextEditorCompDesc: "Rich Text Editor component",
    richTextEditorCompKeywords: "",
    numberInputCompName: "Number Input",
    numberInputCompDesc: "Number Input component",
    numberInputCompKeywords: "",
    sliderCompName: "Slider",
    sliderCompDesc: "Slider component",
    sliderCompKeywords: "",
    rangeSliderCompName: "Range Slider",
    rangeSliderCompDesc: "Range Slider component",
    rangeSliderCompKeywords: "",
    ratingCompName: "Rating",
    ratingCompDesc: "Rating component",
    ratingCompKeywords: "",
    switchCompName: "Switch",
    switchCompDesc: "Switch component",
    switchCompKeywords: "",
    selectCompName: "Select",
    selectCompDesc: "Select component",
    selectCompKeywords: "",
    multiSelectCompName: "Multiselect",
    multiSelectCompDesc: "Multiselect component",
    multiSelectCompKeywords: "",
    cascaderCompName: "Cascader",
    cascaderCompDesc: "Cascader component",
    cascaderCompKeywords: "",
    checkboxCompName: "Checkbox",
    checkboxCompDesc: "Checkbox component",
    checkboxCompKeywords: "",
    radioCompName: "Radio",
    radioCompDesc: "Radio component",
    radioCompKeywords: "",
    segmentedControlCompName: "Segmented Control",
    segmentedControlCompDesc: "Segmented Control component",
    segmentedControlCompKeywords: "",
    fileUploadCompName: "File Upload",
    fileUploadCompDesc: "File Upload component",
    fileUploadCompKeywords: "",
    dateCompName: "Date",
    dateCompDesc: "Date component",
    dateCompKeywords: "",
    dateRangeCompName: "Date Range",
    dateRangeCompDesc: "Date Range component",
    dateRangeCompKeywords: "",
    timeCompName: "Time",
    timeCompDesc: "Time component",
    timeCompKeywords: "",
    timeRangeCompName: "Time Range",
    timeRangeCompDesc: "Time Range component",
    timeRangeCompKeywords: "",
    buttonCompName: "Button",
    buttonCompDesc: "Button component",
    buttonCompKeywords: "",
    linkCompName: "Link",
    linkCompDesc: "Link component",
    linkCompKeywords: "",
    scannerCompName: "Scanner",
    scannerCompDesc: "Scanner component",
    scannerCompKeywords: "",
    dropdownCompName: "Dropdown",
    dropdownCompDesc: "Dropdown component",
    dropdownCompKeywords: "",
    toggleButtonCompName: "Toggle Button",
    toggleButtonCompDesc: "Toggle Button component",
    toggleButtonCompKeywords: "",
    textCompName: "Text",
    textCompDesc: "Text component",
    textCompKeywords: "",
    tableCompName: "Table",
    tableCompDesc: "Table component",
    tableCompKeywords: "",
    imageCompName: "Image",
    imageCompDesc: "Image component",
    imageCompKeywords: "",
    progressCompName: "Progress",
    progressCompDesc: "Progress component",
    progressCompKeywords: "",
    progressCircleCompName: "Process Circle",
    progressCircleCompDesc: "Process Circle component",
    progressCircleCompKeywords: "",
    fileViewerCompName: "File Viewer",
    fileViewerCompDesc: "File Viewer component",
    fileViewerCompKeywords: "",
    dividerCompName: "Divider",
    dividerCompDesc: "Divider component",
    dividerCompKeywords: "",
    qrCodeCompName: "QR Code",
    qrCodeCompDesc: "QR Code component",
    qrCodeCompKeywords: "",
    formCompName: "Form",
    formCompDesc: "Form component",
    formCompKeywords: "",
    jsonSchemaFormCompName: "JSON Schema Form",
    jsonSchemaFormCompDesc: "JSON Schema Form component",
    jsonSchemaFormCompKeywords: "",
    containerCompName: "Container",
    containerCompDesc: "Container component",
    containerCompKeywords: "",
    collapsibleContainerCompName: "Collapsible Container",
    collapsibleContainerCompDesc: "Collapsible Container component",
    collapsibleContainerCompKeywords: "",
    tabbedContainerCompName: "Tabbed Container",
    tabbedContainerCompDesc: "Tabbed Container component",
    tabbedContainerCompKeywords: "",
    modalCompName: "Modal",
    modalCompDesc: "Modal component",
    modalCompKeywords: "",
    listViewCompName: "List View",
    listViewCompDesc: "List View component",
    listViewCompKeywords: "",
    gridCompName: "Grid",
    gridCompDesc: "Grid component",
    gridCompKeywords: "",
    navigationCompName: "Navigation",
    navigationCompDesc: "Navigation component",
    navigationCompKeywords: "",
    iframeCompName: "IFrame",
    iframeCompDesc: "IFrame component",
    iframeCompKeywords: "",
    customCompName: "Custom Component",
    customCompDesc: "Custom Component",
    customCompKeywords: "",
    moduleCompName: "Module",
    moduleCompDesc: "Module component",
    moduleCompKeywords: "",
    jsonExplorerCompName: "JSON Explorer",
    jsonExplorerCompDesc: "JSON Explorer component",
    jsonExplorerCompKeywords: "",
    jsonEditorCompName: "JSON Editor",
    jsonEditorCompDesc: "JSON Editor component",
    jsonEditorCompKeywords: "",
    treeCompName: "Tree",
    treeCompDesc: "Tree component",
    treeCompKeywords: "",
    treeSelectCompName: "Tree Select",
    treeSelectCompDesc: "Tree Select component",
    treeSelectCompKeywords: "",
    audioCompName: "Audio",
    audioCompDesc: "Audio component",
    audioCompKeywords: "",
    videoCompName: "Video",
    videoCompDesc: "Video component",
    videoCompKeywords: "",
    drawerCompName: "Drawer",
    drawerCompDesc: "Drawer component",
    drawerCompKeywords: "",
    chartCompName: "Chart",
    chartCompDesc: "Chart component",
    chartCompKeywords: "",
    carouselCompName: "Carousel",
    carouselCompDesc: "Carousel component",
    carouselCompKeywords: "",
    imageEditorCompName: "Image Editor",
    imageEditorCompDesc: "Image Editor component",
    imageEditorCompKeywords: "",
    calendarCompName: "Calendar",
    calendarCompDesc: "Calendar component",
    calendarCompKeywords: "",
    signatureCompName: "Signature",
    signatureCompDesc: "Signature component",
    signatureCompKeywords: "",
    //Added By Aqib Mirza
    jsonLottieCompName: "Lottie Animation",
    jsonLottieCompDesc: "Lottie Animation",
    jsonLottieCompKeywords: "",
    /////////////////////
    timelineCompName: "Time Line",
    timelineCompDesc: "Time Line",
    timelineCompKeywords: "",
    mentionCompName: "mention",
    mentionCompDesc: "mention",
    mentionCompKeywords: "",
    autoCompleteCompName: "autoComplete",
    autoCompleteCompDesc: "autoComplete",
    autoCompleteCompKeywords: "",
    responsiveLayoutCompName: "Responsive Layout",
    responsiveLayoutCompDesc: "Responsive Layout",
    responsiveLayoutCompKeywords: "",
    commentCompName: "Comment",
    commentCompDesc: "Comment",
    commentCompKeywords: "",
    iconCompName: "icon",
    iconCompDesc: "icon",
    iconCompKeywords: "",
    weekPickerCompName: "Week Picker",
    weekPickerCompDesc: "Week Picker",
    weekPickerCompKeywords: "",
    monthPickerCompName: "Month Picker",
    monthPickerCompDesc: "Month Picker",
    monthPickerCompKeywords: "",
    quarterPickerCompName: "Quarter Picker",
    quarterPickerCompDesc: "Quarter Picker",
    quarterPickerCompKeywords: "",
    yearPickerCompName: "Year Picker",
    yearPickerCompDesc: "Year Picker",
    yearPickerCompKeywords: "",
    amapCompName: "Amap",
    amapCompDesc: "Amap",
    amapCompKeywords: "",
    avatarCompName: "Avatar",
    avatarCompDesc: "Avatar",
    avatarCompKeywords: "",
    descriptionsName: "Descriptions",
    descriptionsDesc: "Descriptions",
    descriptionsKeywords: "",
  },
  comp: {
    menuViewDocs: "View documentation",
    menuUpgradeToLatest: "Upgrade to latest version",
    nameNotEmpty: "Can not be empty",
    nameRegex: "Must start with a letter and contain only letters, digits, and underscores (_)",
    nameJSKeyword: "Can not be a Javascript keyword",
    nameGlobalVariable: "Can not be global variable name",
    nameExists: "Name {name} already exist",
    getLatestVersionMetaError: "Failed to fetch latest version, please try later.",
    needNotUpgrade: "Current version is already latest.",
    compNotFoundInLatestVersion: "Current component not found in the latest version.",
    upgradeSuccess: "Successfully upgraded to latest version.",
    searchProp: "Search",
  },
  jsonSchemaForm: {
    retry: "Retry",
    resetAfterSubmit: "Reset after successful submit",
    jsonSchema: "JSON schema",
    uiSchema: "UI schema",
    schemaTooltip: "See",
    defaultData: "Default data",
    dataDesc: "Current form data",
    required: "Required",
    maximum: "The maximum value is {value}",
    minimum: "The minimum value is {value}",
    exclusiveMaximum: "Should be less than {value}",
    exclusiveMinimum: "Should be greater than {value}",
    multipleOf: "Should be a multiple of {value}",
    minLength: "At least {value} characters",
    maxLength: "At most {value} characters",
    pattern: "Should match the pattern {value}",
    format: "Should match the format {value}",
  },
  select: {
    inputValueDesc: "Input search value",
  },
  customComp: {
    text: "It's a good day.",
    triggerQuery: "Trigger query",
    updateData: "Update data",
    updateText: "I'm also in a good mood!",
    sdkGlobalVarName: "Lowcoder",
  },
  tree: {
    selectType: "Select type",
    noSelect: "No select",
    singleSelect: "Single select",
    multiSelect: "Multi select",
    checkbox: "Checkbox",
    checkedStrategy: "Checked strategy",
    showAll: "All nodes",
    showParent: "Only parent nodes",
    showChild: "Only child nodes",
    autoExpandParent: "Auto expand parent",
    checkStrictly: "Check strictly",
    checkStrictlyTooltip:
      "Check treeNode precisely; parent treeNode and children treeNodes are not associated",
    treeData: "Tree data",
    treeDataDesc: "Current tree data",
    value: "Default values",
    valueDesc: "Current values",
    expanded: "Expanded values",
    expandedDesc: "Current expanded values",
    defaultExpandAll: "Default expand all nodes",
    showLine: "Show line",
    showLeafIcon: "Show leaf icon",
    treeDataAsia: "Asia",
    treeDataChina: "China",
    treeDataBeijing: "Beijing",
    treeDataShanghai: "Shanghai",
    treeDataJapan: "Japan",
    treeDataEurope: "Europe",
    treeDataEngland: "England",
    treeDataFrance: "France",
    treeDataGermany: "Germany",
    treeDataNorthAmerica: "North America",
    helpLabel: "Node label",
    helpValue: "Unique node value in tree",
    helpChildren: "Children nodes",
    helpDisabled: "Disables the node",
    helpSelectable: "Whether node is selectable (single/multi select type)",
    helpCheckable: "Whether display Checkbox (Checkbox type)",
    helpDisableCheckbox: "Disables the Checkbox (Checkbox type)",
  },
  moduleContainer: {
    eventTest: "Event Test",
    methodTest: "Method Test",
    inputTest: "Input Test",
  },
  password: {
    label: "Password",
    visibilityToggle: "Show visibility toggle",
  },
  richTextEditor: {
    placeholder: "Please input...",
    hideToolbar: "Hide toolbar",
    content: "Content",
    title: "Title",
    save: "Save",
    link: "Link: ",
    edit: "Edit",
    remove: "Remove",
  },
  numberInput: {
    formatter: "Format",
    precision: "Precision",
    allowNull: "Allow null value",
    thousandsSeparator: "Show thousands separator",
    controls: "Show increment/decrement buttons",
    step: "Step",
    standard: "Standard",
    percent: "Percent",
  },
  slider: {
    step: "Step",
    stepTooltip: "The value must be greater than 0 and divisible by (max-min)",
  },
  rating: {
    max: "Max rating",
    allowHalf: "Allow half",
  },
  optionsControl: {
    optionList: "Options",
    option: "Option",
    optionI: "Option {i}",
    viewDocs: "View docs",
    tip: 'The "item" and "i" variables represent the value and index of each item in the data array',
  },
  radio: {
    options: "Options",
    horizontal: "Horizontal",
    horizontalTooltip: "The horizontal layout wraps itself when it runs out of space",
    vertical: "Vertical",
    verticalTooltip: "The vertical layout will always be displayed in a single column",
    autoColumns: "Auto column",
    autoColumnsTooltip:
      "The auto column layout automatically rearranges the order as space permits and displays as multiple columns",
  },
  cascader: {
    options: "Structure",
  },
  selectInput: {
    valueDesc: "Currently selected value",
    selectedIndexDesc: "The index of the currently selected value, or -1 if no value is selected",
    selectedLabelDesc: "The label of the currently selected value",
    selectedObjectDesc: "Currently selected Object",

  },
  file: {
    typeErrorMsg: "Must be a number with a valid file size unit, or a unitless number of bytes.",
    fileEmptyErrorMsg: "upload failed. The file size is empty.",
    fileSizeExceedErrorMsg: "upload failed. The file size exceeds the limit.",
    minSize: "Min size",
    minSizeTooltip: `The minimum size of uploaded files with optional file size units (e.g., "5kb", "10 MB"). If no unit is provided, the value will be considered a number of bytes.`,
    maxSize: "Max size",
    maxSizeTooltip: `The maximum size of uploaded files with optional file size units (e.g., "5kb", "10 MB"). If no unit is provided, the value will be considered a number of bytes.`,
    single: "Single",
    multiple: "Multiple",
    directory: "Directory",
    upload: "Browse",
    fileType: "File types",
    reference: "Please refer to",
    fileTypeTooltipUrl:
      "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers",
    fileTypeTooltip: "unique file type specifiers",
    uploadType: "Upload type",
    showUploadList: "Show upload list",
    maxFiles: "Max files",
    filesValueDesc: "The contents of the currently uploaded file are Base64 encoded",
    filesDesc: "List of the current uploaded files. For details, refer to",
    clearValueDesc: "Clear all files",
    parseFiles: "Parse files",
    parsedValueTooltip1:
      "If parseFiles is true, upload files will parse to object, array, or string. Parsed data can be accessed via the parsedValue array.",
    parsedValueTooltip2:
      "Supports Excel, JSON, CSV, and text files. Other formats will return null.",
  },
  date: {
    format: "Format",
    formatTip: "Support:\n" + "YYYY-MM-DD\nYYYY-MM-DD HH:mm:ss\nTimestamp",
    reference: "Please refer to",
    showTime: "Show time",
    start: "Start date",
    end: "End date",
    year: "Year",
    quarter: "Quarter",
    month: "Month",
    week: "Week",
    date: "Date",
    clearAllDesc: "Clear all",
    resetAllDesc: "Reset all",
    placeholder: "Select date",
    startDate: "Start date",
    endDate: "End date",
  },
  time: {
    start: "Start time",
    end: "End time",
    formatTip: "Support:\n" + "HH:mm:ss\nTimestamp",
    placeholder: "Select Time",
    startTime: "Start time",
    endTime: "End time",
  },
  button: {
    prefixIcon: "Prefix icon",
    suffixIcon: "Suffix icon",
    button: "Button",
    formToSubmit: "Form to submit",
    default: "Default",
    submit: "Submit",
    textDesc: "Text currently displayed on button",
    loadingDesc: "Is the button in loading state? If true the current button is loading",
    formButtonEvent: "event",
  },
  link: {
    link: "Link",
    textDesc: "Text currently displayed on link",
    loadingDesc: "Is the link in loading state? If true the current link is loading",
  },
  scanner: {
    text: "Click scan",
    camera: "Camera {index}",
    changeCamera: "Switch camera",
    continuous: "Continuous scanning",
    uniqueData: "Ignore duplicate data",
    maskClosable: "Click the mask to close",
    errTip: "Please use this component under https or localhost",
  },
  dropdown: {
    onlyMenu: "Only menu",
    textDesc: "Text currently displayed on button",
  },
  textShow: {
    // eslint-disable-next-line only-ascii/only-ascii
    text: "### 👋 hello, {name}",
    valueTooltip:
      "Markdown supports most HTML tags and attributes. iframe, script, and other tags are disabled for security reasons.",
    verticalAlignment: "Vertical alignment",
    horizontalAlignment: "Horizontal alignment",
    textDesc: "Text displayed in the current text box",
    fontStyle: "Font Style",
    fontSize: "Font Size",
    bold: "Bold",
    italic: "italic",
  },
  table: {
    editable: "Editable",
    columnNum: "Columns",
    viewModeResizable: "Column width adjusted by user",
    viewModeResizableTooltip: "Whether can adjust column width.",
    showFilter: "Show filter button",
    showRefresh: "Show refresh button",
    showDownload: "Show download button",
    columnSetting: "Show column setting button",
    searchText: "Search text",
    searchTextTooltip: "Search and filter the data presented in the table",
    showQuickJumper: "Show quick jumper",
    hideOnSinglePage: "Hide on single page",
    showSizeChanger: "Show size changer button",
    pageSizeOptions: "Page size options",
    pageSize: "Page size",
    total: "Total row count",
    totalTooltip:
      "The default value is the number of current data items, which can be obtained from the query, for example: '{{query1.data[0].count}}'",
    filter: "Filter",
    filterRule: "Filter rule",
    chooseColumnName: "Choose column",
    chooseCondition: "Choose condition",
    clear: "Clear",
    columnShows: "Column shows",
    selectAll: "Select all",
    and: "And",
    or: "Or",
    contains: "contains",
    notContain: "does not contain",
    equals: "equals",
    isNotEqual: "is not equal",
    isEmpty: "is empty",
    isNotEmpty: "is not empty",
    greater: "greater than",
    greaterThanOrEquals: "greater than or equals",
    lessThan: "less than",
    lessThanOrEquals: "less than or equals",
    action: "Action",
    columnValue: "Column value",
    columnValueTooltip:
      "'{{currentCell}}': current cell data\n" +
      "'{{currentRow}}': current row data\n" +
      "'{{currentIndex}}': current data index(starting from 0)\n" +
      "Example: '{{currentCell * 5}}' show 5 times the original value data.",
    imageSrc: "Image source",
    imageSize: "Image size",
    columnTitle: "Title",
    sortable: "Sortable",
    align: "Alignment",
    fixedColumn: "Fixed column", // draft
    autoWidth: "Auto width",
    customColumn: "Custom column",
    auto: "Auto",
    fixed: "Fixed",
    columnType: "Column type",
    float: "Float",
    prefix: "Prefix",
    suffix: "Suffix",
    text: "Text",
    number: "Number",
    link: "Link",
    links: "Links",
    tag: "Tag",
    date: "Date",
    dateTime: "Date Time",
    badgeStatus: "Status",
    button: "Button",
    image: "Image",
    boolean: "Boolean",
    rating: "Rating",
    progress: "Progress",
    option: "Operation ",
    optionList: "Operation list",
    option1: "Operation 1",
    status: "Status",
    statusTooltip: "Optional values: success, error, default, warning, processing",
    primaryButton: "Primary",
    defaultButton: "Default",
    type: "Type",
    tableSize: "Table size",
    hideHeader: "Hide table header",
    hideBordered: "Hide column border",
    deleteColumn: "Delete column",
    confirmDeleteColumn: "Confirm delete column: ",
    small: "S",
    middle: "M",
    large: "L",
    refreshButtonTooltip: "The current data changes, click to regenerate the column.",
    changeSetDesc:
      "An object representing changes to an editable table, only contains the changed cell. Rows go first and columns go second.",
    selectedRowDesc:
      "Provides data for the currently selected row, indicating the row that triggers a click event if the user clicks a button/link on the row",
    selectedRowsDesc: "Useful in multiple selection mode, same as selectedRow",
    pageNoDesc: "Current display page, starting from 1",
    pageSizeDesc: "How many rows per page",
    sortColumnDesc: "The name of the currently selected sorted column",
    sortDesc: "Whether the current row is in descending order",
    pageOffsetDesc:
      "The current start of paging, used for paging to get data. Example: select * from users limit '{{table1.pageSize}}' offset '{{table1.pageOffset}}'",
    displayDataDesc: "Data displayed in the current table",
    selectedIndexDesc: "Selected index in display data",
    filterDesc: "Table Filtering Parameters",
    dataDesc: "The raw data used in the current table",
    saveChanges: "Save changes",
    cancelChanges: "Cancel changes",
    rowSelectChange: "Row select change",
    rowClick: "Row click",
    filterChange: "Filter change",
    sortChange: "Sort change",
    pageChange: "Page change",
    refresh: "Refresh",
    rowColor: "Row color",
    rowColorDesc:
      "Conditionally set the row color based on the optional variables:\n" +
      "currentRow, currentOriginalIndex, currentIndex, columnTitle. \n" +
      "For example:\n" +
      `'{{ currentRow.id > 3 ? "green" : "red" }}'`,
    saveChangesNotBind:
      "No event handler configured for saving changes. Please bind at least one event handler before click.",
    dynamicColumn: "Use dynamic column setting",
    dynamicColumnConfig: "Column Setting",
    dynamicColumnConfigDesc:
      "Dynamic column settings. Accepts an array of column names. All columns are visible by default.\n" +
      `Example: ["id", "name"]`,
    position: "Position",
    showDataLoadSpinner: "Show spinner during data loading",
    showValue: "Show Value",
    expandable: "Expandable",
    configExpandedView: "Configure expanded view",
    toUpdateRowsDesc: "An array of objects for rows to be updated in editable tables.",
    empty: "Empty",
    falseValues: "Text when false",
    allColumn: "All",
    visibleColumn: "Visible",
    emptyColumns: "No columns are currently visible",
  },
  image: {
    src: "Image source",
    srcDesc: "The image source",
    supportPreview: "Support click preview",
    supportPreviewTip: "Effective when the image source is valid",
  },
  progress: {
    value: "Value",
    valueTooltip: "The percentage complete as a value between 0 and 100",
    showInfo: "Show Value",
    valueDesc: "Current progress value, ranging from 0 to 100",
    showInfoDesc: "Whether to display the current progress value",
  },
  fileViewer: {
    invalidURL: "A valid URL was not provided",
    src: "File URI",
    srcTooltip:
      "Preview provided link content by embedding HTML, base64 encoded data can also be supported, for example: data:application/pdf; base64,AAA... CCC",
    srcDesc: "The file URI",
  },
  divider: {
    title: "Title",
    align: "Alignment",
    dashed: "Dashed",
    dashedDesc: "Whether to use dashed line",
    titleDesc: "Divider title",
    alignDesc: "Divider title alignment",
  },
  QRCode: {
    value: "Value",
    valueTooltip: "The value contains a maximum of 2953 characters",
    level: "Fault tolerance level",
    levelTooltip:
      "Refers to the QR code is blocked part, can still be scanned out. The higher the level, the more complex the code, and the more blocked it is, the more it can be scanned",
    includeMargin: "Show margin",
    image: "Image",
    valueDesc: "The qrCode value",
    L: "L (Low)",
    M: "M (Medium)",
    Q: "Q (Quartile)",
    H: "H (High)",
    maxLength: "The content is too long. Set the length to less than 2953 characters",
    renderType: "Render Type",
    status: "status",
    active: "active",
    expired: "expired",
    loading: "loading",
    imageTooltip: "Image URL/ Base64 encoded",
  },
  amap: {
    akey: "Amap key",
    akeyTooltip: "Apply for a secret key",
    akeyNote: "Please apply for a secret key on the official website of Gaode, otherwise the map component may not be displayed",
    center: "Center",
    centerDes: "chenter postion of map",
    zoom: "Zoom",
    defaultTitle: "markers data",
    allowAddMark: "add Mark",
    allowAddMarkDes: "click left button to add markers",
    allowDelMark: "del Mark",
    allowDelMarkDes: "click right button to delete markers",
    markers: "markers",
    markersValueDes: "marks on map",
    centerValueDes: "center of map",
    zoomValueDes: "map zoom level",
    Introduction: "Introduction keys",
    positionDes: "Latitude and longitude marked on the map",
    titleDes: "title of marker",
    clickedMarkerDes: "clicked marker value",
    clickedPositionDes: "clicked position",
    showControlBar: "Show control bar",
    showZoomButton: "Show zoom button",
  },
  jsonExplorer: {
    indent: "Indent",
    expandToggle: "Expand toggle",
    theme: "Theme",
    valueDesc: "Current json Data",
    default: "Default",
    defaultDark: "Default dark",
    neutralLight: "Neutral light",
    neutralDark: "Neutral dark",
    azure: "Azure",
    darkBlue: "Dark blue",
  },
  audio: {
    src: "Audio URL",
    defaultSrcUrl: "https://cdn-files.lowcoder.dev/canon-excerpt.mp3",
    autoPlay: "Autoplay",
    loop: "Loop",
    srcDesc: "Current audio URL",
    play: "Play",
    playDesc: "Triggered when audio is played",
    pause: "Pause",
    pauseDesc: "Triggered when audio is paused",
    ended: "Ended",
    endedDesc: "Triggered when the audio ends playing",
  },
  video: {
    src: "Video URL",
    defaultSrcUrl: "https://www.youtube.com/watch?v=pRpeEdMmmQ0",
    poster: "Poster URL",
    defaultPosterUrl: "",
    autoPlay: "Autoplay",
    loop: "Loop",
    controls: "Hide controls",
    volume: "Volume",
    playbackRate: "Playback rate",
    posterTooltip: "The default value is the first frame of the video",
    autoPlayTooltip:
      "After the video is loaded, it will play automatically. Changing this value from true to false will pause the video. (If a poster is set, it will be played by the poster button)",
    controlsTooltip:
      "Hide video playback controls. May not be fully supported by every video source.",
    volumeTooltip: "Set the volume of the player, between 0 and 1",
    playbackRateTooltip: "Set the rate of the player, between 1 and 2",
    srcDesc: "Current video URL",
    play: "Play",
    playDesc: "Triggered when video is played",
    pause: "Pause",
    pauseDesc: "Triggered when video is paused",
    load: "Load",
    loadDesc: "Triggered when the video resource has finished loading",
    ended: "Ended",
    endedDesc: "Triggered when the video ends playing",
    currentTimeStamp: "The current playback position of the video in seconds",
    duration: "The total duration of the video in seconds",
  },
  media: {
    playDesc: "Begins playback of the media.",
    pauseDesc: "Pauses the media playback.",
    loadDesc: "Resets the media to the beginning and restart selecting the media resource.",
    seekTo: "Seek to the given number of seconds, or fraction if amount is between 0 and 1",
    seekToAmount: "Number of seconds, or fraction if it is between 0 and 1",
    showPreview: "Show preview",
  },
  rangeSlider: {
    start: "Start value",
    end: "End value",
    step: "Step size",
    stepTooltip:
      "The slider's granularity, the value must be greater than 0 and divisible by (max-min)",
  },
  iconControl: {
    selectIcon: "Select an icon",
    insertIcon: "insert an icon",
    insertImage: "Insert an image or ",
  },
  millisecondsControl: {
    timeoutTypeError: "Please enter the correct timeout period, the current input is: {value}",
    timeoutLessThanMinError: "Input must greater than {left}, the current input is: {value}",
  },
  selectionControl: {
    single: "Single",
    multiple: "Multiple",
    close: "Close",
    mode: "Select mode",
  },
  container: {
    title: "Container title",
    showScroll: "Show scroll",
  },
  drawer: {
    placement: "Drawer placement",
    size: "Size",
    top: "Top",
    right: "Right",
    bottom: "Bottom",
    left: "Left",
    widthTooltip: "Number or percentage, e.g. 520, 60%",
    heightTooltip: "Number, e.g. 378",
    openDrawerDesc: "Open Drawer",
    closeDrawerDesc: "Close Drawer",
    width: "Drawer width",
    height: "Drawer height",
  },
  settings: {
    title: "Settings",
    member: "Members",
    organization: "Workspaces",
    audit: "Audit Logs",
    theme: "Themes",
    plugin: "Plugins",
    advanced: "Advanced",
    lab: "Lab",
    branding: "Branding",
    idSource: "ID Providers",
    premium: "Premium",
  },
  memberSettings: {
    admin: "Admin",
    adminGroupRoleInfo: "Admin can manage group members and resources",
    adminOrgRoleInfo: "Own all resources and can manage groups.",
    member: "Member",
    memberGroupRoleInfo: "Member can view group members",
    memberOrgRoleInfo: "Can only use or visit resources they have access to.",
    title: "Members",
    createGroup: "Create group",
    newGroupPrefix: "New group ",
    allMembers: "All members",
    deleteModalTitle: "Delete this group",
    deleteModalContent: "The deleted group cannot be restored. Are you sure to delete the group?",
    addMember: "Add members",
    nameColumn: "User name",
    joinTimeColumn: "Joining time",
    actionColumn: "Operation",
    roleColumn: "Role",
    exitGroup: "Exit Group",
    moveOutGroup: "Remove from group",
    inviteUser: "Invite members",
    exitOrg: "Leave",
    exitOrgDesc: "Are you sure you want to leave this workspace.",
    moveOutOrg: "Remove",
    moveOutOrgDescSaasMode: "Are you sure you want to remove user {name} from this workspace?",
    moveOutOrgDesc: "Are you sure you want to remove user {name}? This action cannot be recovered.",
    devGroupTip: "Members of the developer group have privileges to create apps and data sources.",
    lastAdminQuit: "The last administrator cannot exit.",
    organizationNotExist: "The current workspace does not exist",
    inviteUserHelp: "You can copy the invitation link to send to the user",
    inviteUserLabel: "Invitation link:",
    inviteCopyLink: "Copy Link",
    inviteText:
      '{userName} invites you to join the workspace "{organization}", Click on the link to join: {inviteLink}',
    groupName: "Group name",
    createTime: "Create time",
    manageBtn: "Manage",
    userDetail: "Detail",
    syncDeleteTip: "This group has been deleted from the address book source",
    syncGroupTip: "This group is an address book synchronization group and cannot be edited",
  },
  orgSettings: {
    newOrg: "New workspace",
    title: "Workspace",
    createOrg: "Create workspace",
    deleteModalTitle: "Are you sure to delete this workspace?",
    deleteModalContent:
      "You are about to delete this workspace {permanentlyDelete}. Once deleted, the workspace {notRestored}.",
    permanentlyDelete: "permanently",
    notRestored: "cannot be restored",
    deleteModalLabel: "Please enter workspace name{name}to confirm the operation:",
    deleteModalTip: "Please enter workspace name",
    deleteModalErr: "Workspace name is incorrect",
    deleteModalBtn: "Delete",
    editOrgTitle: "Edit workspace information",
    orgNameLabel: "Workspace name:",
    orgNameCheckMsg: "Workspace name cannot be empty",
    orgLogo: "Workspace logo:",
    logoModify: "Modify picture",
    inviteSuccessMessage: "Join the workspace successfully",
    inviteFailMessage: "Failed to join workspace",
    uploadErrorMessage: "Upload error",
    orgName: "Workspace name",
  },
  freeLimit: "Free trial",
  tabbedContainer: {
    switchTab: "Switch tab",
    switchTabDesc: "Triggered when switching tabs",
    tab: "Tabs",
    atLeastOneTabError: "The Tab container keeps at least one Tab",
    selectedTabKeyDesc: "Currently selected TAB",
    iconPosition: "Icon position",
    TabPosition: "Label Position",
    left: "Left",
    right: "Right",
    top: "Top",
    bottom: "Bottom",
    defaultKey: "Default key",
  },
  formComp: {
    containerPlaceholder: "Drag components from the right pane or",
    openDialogButton: "generate form from data",
    resetAfterSubmit: "Reset after successful submit",
    initialData: "Initial data",
    disableSubmit: "Disable submit",
    success: "Form generated successfully",
    selectCompType: "Select component type",
    dataSource: "Data source: ",
    selectSource: "Select source",
    table: "Table: ",
    selectTable: "Select table",
    columnName: "Column name",
    dataType: "Data type",
    compType: "Component type",
    required: "Required",
    generateForm: "Generate form",
    compSelectionError: "Unconfigured column type",
    compTypeNameError: "Could not get the component type name",
    noDataSourceSelected: "No data source selected",
    noTableSelected: "No table selected",
    noColumn: "No column",
    noColumnSelected: "No column selected",
    noDataSourceFound: "No supported data source found. Create a new data source",
    noTableFound: "No tables were found in this data source, please select another data source",
    noColumnFound: "No supported column was found in this table. Please select another table",
    formTitle: "Form title",
    name: "Name",
    nameTooltip:
      "The attribute name in the data of the form, when left blank, defaults to the component name",
    notSupportMethod: " Not supported methods: ",
    notValidForm: "The form is not valid",
    resetDesc: "Reset form data to default value",
    clearDesc: "Clear form data",
    setDataDesc: "Set form data",
    valuesLengthError: "Parameter number error",
    valueTypeError: "Parameter type error",
    dataDesc: "Current form data",
    loadingDesc: "Whether the form is loading?",
  },
  modalComp: {
    close: "Close",
    closeDesc: "Triggered when the dialog box is closed",
    openModalDesc: "Open the dialog box",
    closeModalDesc: "Close the dialog box",
    visibleDesc: "Is it visible? If true, the current dialog box will pop up",
    modalHeight: "Modal height",
    modalHeightTooltip: "Number, example: 222",
    modalWidth: "Modal width",
    modalWidthTooltip: "Number or percentage, example: 520, 60%",
    defaultStartHeight: "pop-up height",
    defaultStartHeightTooltip: "Default pop-up height for modal，Can be set to 20% or 200px",
  },
  listView: {
    noOfRows: "Row count",
    noOfRowsTooltip:
      "Number of rows in the list - This is usually set to a variable (for example, '{{query1.data.length}}') if you need to present the results of a query.",
    noOfColumns: "Column count",
    itemIndexName: "Item index name",
    itemIndexNameDesc: "the variable name refer to the item's index, default as {default}",
    itemDataName: "Item data name",
    itemDataNameDesc: "the variable name refer to the item's data object, default as {default}",
    itemsDesc: "Exposing data of Comps in list",
    dataDesc: "The raw data used in the current list",
    dataTooltip:
      "If evaluated as Number, this field will be regarded as row count, and the data will be regarded as empty.",
  },
  navigation: {
    addText: "Add submenu item",
    logoURL: "Logo URL",
    horizontalAlignment: "Horizontal alignment",
    logoURLDesc: "Logo URL value",
    itemsDesc: "Navigation menu items",
  },
  iframe: {
    URLDesc: "The source URL",
    allowDownload: "Downloads",
    allowSubmitForm: "Submit form",
    allowMicrophone: "Microphone",
    allowCamera: "Camera",
    allowPopup: "Popups",
  },
  droppadbleMenuItem: {
    subMenu: "Submenu {number}",
  },
  navItemComp: {
    active: "Active",
  },
  switchComp: {
    open: "Open",
    close: "Close",
    openDesc: "Triggered when the switch is turned on",
    closeDesc: "Triggered when the switch is turned off",
    valueDesc: "Current switch status",
  },
  signature: {
    tips: "Tips",
    signHere: "Sign here",
    showUndo: "Show undo",
    showClear: "Show clear",
  },
  localStorageComp: {
    valueDesc: "All data items currently stored",
    setItemDesc: "Add an item",
    removeItemDesc: "Remove an item",
    clearItemDesc: "Clear all items",
  },
  utilsComp: {
    openUrl: "Open URL",
    openApp: "Open App",
    copyToClipboard: "Copy to clipboard",
    downloadFile: "Download file",
  },
  messageComp: {
    info: "Send a notification",
    success: "Send a success notification",
    warn: "Send a warning notification",
    error: "Send a error notification",
  },
  themeComp: {
    switchTo: "Switch theme",
  },
  transformer: {
    preview: "Preview",
    docLink: "About transformer",
    previewSuccess: "Preview success",
    previewFail: "Preview fail",
    deleteMessage: "Delete transformer success. You can use {undoKey} to undo.",
  },
  temporaryState: {
    value: "Init value",
    valueTooltip: "The initial Value stored in the temporary state can be any valid JSON Value.",
    docLink: "About temporary state",
    pathTypeError: "Path must be either a string or an array of values",
    unStructuredError: "Unstructured data {prev} can't be updated by {path}",
    valueDesc: "Temporary state value",
    deleteMessage: "The temporary state is deleted successfully. You can use {undoKey} to undo.",
  },
  dataResponder: {
    data: "Data",
    dataDesc: "Data of current data responder",
    dataTooltip: "When this data is changed, it will trigger subsequent actions.",
    docLink: "About the Data responder",
    deleteMessage: "The data responder is deleted successfully. You can use {undoKey} to undo.",
  },
  theme: {
    title: "Themes",
    createTheme: "Create theme",
    themeName: "Theme name:",
    themeNamePlaceholder: "Please enter a theme name",
    defaultThemeTip: "Default theme:",
    createdThemeTip: "The theme that you have created:",
    option: "Option{index}",
    input: "Input",
    confirm: "Ok",
    emptyTheme: "No themes available",
    click: "",
    toCreate: "",
    nameColumn: "Name",
    defaultTip: "Default",
    updateTimeColumn: "Update time",
    edit: "Edit",
    cancelDefaultTheme: "Unset default theme",
    setDefaultTheme: "Set as default theme",
    copyTheme: "Duplicate theme",
    setSuccessMsg: "Setting succeeded",
    cancelSuccessMsg: "Unsetting succeeded",
    deleteSuccessMsg: "Deletion succeeded",
    checkDuplicateNames: "The theme name already exists, please re-enter it",
    copySuffix: " Copy",
    saveSuccessMsg: "Saved successfully",
    leaveTipTitle: "Tips",
    leaveTipContent: "You haven't saved yet, confirm leaving?",
    leaveTipOkText: "Leave",
    goList: "Back to the list",
    saveBtn: "Save",
    mainColor: "Main colors",
    text: "Text colors",
    defaultTheme: "Default",
    yellow: "Yellow",
    green: "Green",
    previewTitle: "Theme preview\nExample components that use your theme colors",
    dateColumn: "Date",
    emailColumn: "Email",
    phoneColumn: "Phone",
    subTitle: "Title",
    linkLabel: "Link",
    linkUrl: "cloud.lowcoder.dev",
    progressLabel: "Progress",
    sliderLabel: "Slider",
    radioLabel: "Radio",
    checkboxLabel: "Checkbox",
    buttonLabel: "Button",
    switch: "Switch",
    previewDate: "16/10/2022",
    previewEmail1: "ted.com",
    previewEmail2: "skype.com",
    previewEmail3: "imgur.com",
    previewEmail4: "globo.com",
    previewPhone1: "+63-317-333-0093",
    previewPhone2: "+30-668-580-6521",
    previewPhone3: "+86-369-925-2071",
    previewPhone4: "+7-883-227-8093",
    chartPreviewTitle: "Chart style preview",
    chartSpending: "Spending",
    chartBudget: "Budget",
    chartAdmin: "Administration",
    chartFinance: "Finance",
    chartSales: "Sales",
    chartFunnel: "Funnel Chart",
    chartShow: "Show",
    chartClick: "Click",
    chartVisit: "Visit",
    chartQuery: "Query",
    chartBuy: "Buy",
  },
  pluginSetting: {
    title: "Plugins",
    npmPluginTitle: "npm plugins",
    npmPluginDesc: "Set up npm plugins for all applications in the current workspace.",
    npmPluginEmpty: "No npm plugins were added.",
    npmPluginAddButton: "Add a npm plugin",
    saveSuccess: "Saved successfully",
  },
  advanced: {
    title: "Advanced",
    defaultHomeTitle: "Default homepage",
    defaultHomeHelp:
      "The homepage is the app all non-developers will see by default when they log in. Note: Make sure the selected app is accessible to non-developers.",
    defaultHomePlaceholder: "Select the default homepage",
    saveBtn: "Save",
    preloadJSTitle: "Preload JavaScript",
    preloadJSHelp: "Set up preloaded JavaScript code for all apps in the current workspace.",
    preloadCSSTitle: "Preload CSS",
    preloadCSSHelp: " Set up preloaded CSS code for all apps in the current workspace.",
    preloadCSSApply: "Apply to the homepage of the workspace",
    preloadLibsTitle: "JavaScript library",
    preloadLibsHelp:
      "Set up preloaded JavaScript libraries for all applications in the current workspace, and the system has built-in lodash, day.js, uuid, numbro for direct use. JavaScript libraries are loaded before the app is initialized, so there is a certain impact on app performance.",
    preloadLibsEmpty: "No JavaScript libraries were added",
    preloadLibsAddBtn: "Add a library",
    saveSuccess: "Saved successfully",
  },
  branding: {
    title: "Branding",
    logoTitle: "Logo",
    logoHelp: ".JPG, .SVG or .PNG only",
    faviconTitle: "Favicon",
    faviconHelp: ".JPG, .SVG or .PNG only",
    brandNameTitle: "Brand Name",
    headColorTitle: "Head Color",
    save: "Save",
    saveSuccessMsg: "Saved successfully",
    upload: "Click to upload",
  },
  networkMessage: {
    500: "Busy service, please try again later",
    0: "Failed to connect to server, please check your network",
    401: "Authentication failed, please log on again",
    403: "No permission, please contact the administrator for authorization",
    timeout: "Request timeout",
  },
  share: {
    title: "Share",
    viewer: "Viewer",
    editor: "Editor",
    owner: "Owner",
    datasourceViewer: "Can use",
    datasourceOwner: "Can manage",
  },
  debug: {
    title: "Title",
    switch: "Switch component: ",
  },
  module: {
    emptyText: "No data",
    circularReference: "Circular reference, current module/application cannot be used!",
    emptyTestInput: "The current module has no input to test",
    emptyTestMethod: "The current module has no method to test",
    name: "Name",
    input: "Input",
    params: "Params",
    emptyParams: "No params has been added",
    emptyInput: "No input has been added",
    emptyMethod: "No method has been added",
    emptyOutput: "No output has been added",
    data: "Data",
    string: "String",
    number: "Number",
    array: "Array",
    boolean: "Boolean",
    query: "Query",
    autoScaleCompHeight: "Component height scales with container",
    excuteMethod: "Execute method {name}",
    method: "Method",
    action: "Action",
    output: "Output",
    nameExists: "Name {name} already exist",
    eventTriggered: "Event {name} is triggered",
    globalPromptWhenEventTriggered: "Displays a global prompt when an event is triggered",
    emptyEventTest: "The current module has no events to test",
    emptyEvent: "No event has been added",
    event: "Event",
  },
  resultPanel: {
    returnFunction: "The return value is a function.",
    consume: "{time}",
    JSON: "Show JSON",
  },
  createAppButton: {
    creating: "Creating...",
    created: "Create {name}",
  },
  apiMessage: {
    authenticationFail: "User authentication failed, please sign in again",
    verifyAccount: "Need to verify account",
    functionNotSupported:
      "The current version does not support this function. Please contact the Lowcoder business team to upgrade your account",
  },
  globalErrorMessage: {
    createCompFail: "Create component {comp} failed",
    notHandledError: "{method} method not executed",
  },
  aggregation: {
    navLayout: " Navigation bar",
    chooseApp: "Choose app",
    iconTooltip: "Support image link or Base64",
    hideWhenNoPermission: "Hidden for unauthorized users",
    queryParam: "URL Query params",
    hashParam: "URL Hash params",
    tabBar: "Tab bar",
    emptyTabTooltip: "Configure this page on the right pane",
    selectedKey: "current selected key",
  },
  appSetting: {
    title: "App settings",
    pageSetting: "Page settings",
    450: "450px (Phone)",
    800: "800px (Tablet)",
    1440: "1440px (Laptop)",
    1920: "1920px (Wide screen)",
    3200: "3200px (Super large screen)",
    autofill: "Autofill",
    userDefined: "Custom",
    default: "Default",
    tooltip: "Close the popover after setting",
    canvasMaxWidth: "Maximum canvas width",
    userDefinedMaxWidth: "Custom maximum width",
    inputUserDefinedPxValue: "Please enter a custom pixel value",
    maxWidthTip: "Max width should be greater than or equal to 350",
    themeSetting: "Theme setting",
    themeSettingDefault: "Default",
    themeCreate: "Create theme",
    HeaderSetting: "Header setting",
    HeaderSettingDes: "When previewing you can also manually set the URL parameter template=true to hide the Header",
    PCPadding: "PC container padding",
    PCPaddingDes: "Setting the padding of the PC page container",
    MobilePadding: "Mobile container padding",
    MobilePaddingDes: "Setting the padding of the Mobile page container",
    showHeader: "Show",
    hiddenHeader: "hidden",
  },
  customShortcut: {
    title: "Custom shortcuts",
    shortcut: "Shortcut",
    action: "Action",
    empty: "No shortcuts",
    placeholder: "Press shortcut",
    otherPlatform: "Other",
    space: "Space",
  },
  profile: {
    orgSettings: "Workspace settings",
    switchOrg: "Switch workspace",
    joinedOrg: "My workspaces",
    createOrg: "Create workspace",
    logout: "Log out",
    personalInfo: "My profile",
    bindingSuccess: "Binding {sourceName} success",
    uploadError: "Upload error",
    editProfilePicture: "Modify",
    nameCheck: "Name cannot be empty",
    name: "Name: ",
    namePlaceholder: "Please enter your name",
    toBind: "To bind",
    binding: "Is binding",
    bindError: "Parameter error, currently not supported binding.",
    bindName: "Bind {name}",
    loginAfterBind: "After binding, you can use {name} to log in",
    bindEmail: "Bind email:",
    email: "email",
    emailCheck: "Please enter a valid email",
    emailPlaceholder: "Please enter your email",
    submit: "Submit",
    bindEmailSuccess: "Email binding success",
    passwordModifiedSuccess: "Password changed successfully",
    passwordSetSuccess: "Password set successfully",
    oldPassword: "Old password:",
    inputCurrentPassword: "Please enter your current password",
    newPassword: "New password:",
    inputNewPassword: "Please enter your new password",
    confirmNewPassword: "Confirm new password:",
    inputNewPasswordAgain: "Please enter your new password again",
    password: "Password:",
    modifyPassword: "Modify password",
    setPassword: "Set password",
    alreadySetPassword: "Password set",
    setPassPlaceholder: "You can login with password",
    setPassAfterBind: "You can set password After Account bind",
    socialConnections: "Social Connections",
  },
  shortcut: {
    shortcutList: "Keyboard shortcuts",
    click: "Click",
    global: "Global",
    toggleShortcutList: "Toggle keyboard shortcuts",
    editor: "Editor",
    toggleLeftPanel: "Toggle left pane",
    toggleBottomPanel: "Toggle bottom pane",
    toggleRightPanel: "Toggle right pane",
    toggleAllPanels: "Toggle all panes",
    preview: "Preview",
    undo: "Undo",
    redo: "Redo",
    showGrid: "Show grid",
    component: "Component",
    multiSelect: "Select multiple",
    selectAll: "Select all",
    copy: "Copy",
    cut: "Cut",
    paste: "Paste",
    move: "Move",
    zoom: "Resize",
    delete: "Delete",
    deSelect: "Deselect",
    queryEditor: "Query editor",
    excuteQuery: "Run current query",
    editBox: "Text editor",
    formatting: "Format",
    openInLeftPanel: "Open in left pane",
  },
  help: {
    videoText: "Overview",
    onBtnText: "OK",
    // eslint-disable-next-line only-ascii/only-ascii
    permissionDenyTitle: "💡 Unable to create a new application or data source?",
    permissionDenyContent:
      "You don't have permission to create the application and data source. Please contact the administrator to join the developer group.",
    appName: "Tutorial application",
    chat: "Chat with us",
    docs: "View documentation",
    editorTutorial: "Editor tutorial",
    update: "What's new?",
    version: "Version",
    versionWithColon: "Version: ",
    submitIssue: "Submit an issue",
  },
  header: {
    nameCheckMessage: "The name cannot be empty",
    viewOnly: "View only",
    recoverAppSnapshotTitle: "Restore this version?",
    recoverAppSnapshotContent: "Restore current app to the version created at {time}.",
    recoverAppSnapshotMessage: "Restore this version",
    returnEdit: "Return to editor",
    deploy: "Publish",
    export: "Export to JSON",
    editName: "Edit name",
    duplicate: "Duplicate {type}",
    snapshot: "History",
    scriptsAndStyles: "Scripts and style",
    appSettings: "App settings",
    preview: "Preview",
    editError: "History preview mode, no operation is supported.",
    clone: "Clone",
  },
  userAuth: {
    registerByEmail: "Sign up",
    email: "Email:",
    inputEmail: "Please enter your email",
    inputValidEmail: "Please enter a valid email",
    register: "Sign up",
    userLogin: "Sign in",
    login: "Sign in",
    bind: "Bind",
    passwordCheckLength: "At least {min} characters",
    passwordCheckContainsNumberAndLetter: "Must contain letters and numbers",
    passwordCheckSpace: "Cannot contain whitespace characters",
    // eslint-disable-next-line only-ascii/only-ascii
    welcomeTitle: "🎉 Welcome to {productName} 🎉",
    inviteWelcomeTitle: "{username} invite you to login {productName}",
    terms: "Terms",
    privacy: "Privacy Policy",
    registerHint: "I have read and agree",
    chooseAccount: "Choose your Account",
    signInLabel: "Sign in with {name}",
    bindAccount: "Bind Account",
    scanQrCode: "Scan the QR code with {name}",
    invalidThirdPartyParam: "Invalid third-party param",
    account: "Account",
    inputAccount: "Please enter your account",
    ldapLogin: "LDAP Sign in",
    resetPassword: "Reset Password",
    resetPasswordDesc:
      "Reset user {name}'s password. A new password will be generated after reset.",
    resetSuccess: "Reset succeeded",
    resetSuccessDesc: "Password reset succeeded. The new password is: {password}",
    copyPassword: "Copy password",
  },
  preLoad: {
    jsLibraryHelpText:
      "Add JavaScript libraries to your current application via URL addresses. lodash, day.js, uuid, numbro are built into the system for immediate use.  JavaScript libraries are loaded before the application is initialized, which can have an impact on application performance.",
    exportedAs: "Exported as",
    urlTooltip:
      "URL address of the JavaScript library, [unpkg.com](https://unpkg.com/) or [jsdelivr.net](https://www.jsdelivr.com/) is recommended",
    recommended: "Recommended",
    viewJSLibraryDocument: "Document",
    jsLibraryURLError: "Invalid URL",
    jsLibraryExist: "JavaScript library already exists",
    jsLibraryEmptyContent: "No JavaScript libraries added",
    jsLibraryDownloadError: "JavaScript library download error",
    jsLibraryInstallSuccess: "JavaScript library installed successfully",
    jsLibraryInstallFailed: "JavaScript library installation failed",
    jsLibraryInstallFailedCloud:
      "Perhaps the library is not available in the sandbox, [Documentation](https://docs.lowcoder.cloud/build-apps/write-javascript/use-third-party-libraries#manually-import-libraries)\n{message}",
    jsLibraryInstallFailedHost: "{message}",
    add: "Add New",
    jsHelpText: "Add a global method or variable to the current application.",
    cssHelpText:
      "Add styles to the current application. The DOM structure may change as the system iterates. Try to modify styles through component properties.",
    scriptsAndStyles: "Scripts and styles",
    jsLibrary: "JavaScript library",
  },
  editorTutorials: {
    component: "Component",
    componentContent:
      "The right component area has tables, buttons, input boxes, selectors, and other components that can be dragged onto the canvas for use.",
    canvas: "Canvas",
    canvasContent:
      "What you see on the canvas is what you get, and you can adjust component layout and size by dragging and dropping, and delete/copy/paste components with keyboard shortcuts.",
    queryData: "Query data",
    queryDataContent: `Create a new query here and connect to your MySQL, MongoDB, Redis, Airtable, and other data sources. After configuring the query, click "Run" to obtain the data.`,
    compProperties: "Component properties",
  },
  homeTutorials: {
    // eslint-disable-next-line only-ascii/only-ascii
    createAppContent: `🎉 Welcome to {productName}, click "App" and start to create your first application.`,
    createAppTitle: "Create app",
  },
  history: {
    layout: "'{0}' layout adjustment",
    upgrade: "Upgrade '{0}'",
    delete: "Delete '{0}'",
    add: "Add '{0}'",
    modify: "Modify '{0}'",
    rename: "Rename '{1}' to '{0}'",
    recover: "Recover '{2}''s version",
    recoverVersion: "Recover version",
    andSoOn: "and so on",
    timeFormat: "MM DD at hh:mm A",
    emptyHistory: "No history",
    currentVersionWithBracket: " (Current)",
    currentVersion: "Current version",
    justNow: "Just now",
    history: "History",
  },
  home: {
    allApplications: "All Apps",
    allModules: "All Modules",
    allFolders: "All Folders",
    modules: "Modules",
    module: "Module",
    trash: "Trash",
    queryLibrary: "Query Library",
    datasource: "Data Sources",
    selectDatasourceType: "Select data source type",
    home: "Home",
    all: "All",
    app: "App",
    navigation: "Navigation",
    navLayout: "PC Navigation",
    navLayoutDesc: "Left-side menu for easy desktop navigation.",
    mobileTabLayout: "Mobile Navigation",
    mobileTabLayoutDesc: "Bottom navigation bar for smooth mobile browsing.",
    folders: "Folders",
    folder: "Folder",
    rootFolder: "Root",
    import: "Import",
    export: "Export to JSON",
    inviteUser: "Invite members",
    createFolder: "Create Folder",
    createFolderSubTitle: "Folder name:",
    moveToFolder: "Move to folder",
    moveToTrash: "Move to trash",
    moveToFolderSubTitle: 'Move "{name}" to:',
    folderName: "Folder name:",
    resCardSubTitle: "{time} by {creator}",
    trashEmpty: "Trash is empty.",
    projectEmpty: "Nothing here.",
    projectEmptyCanAdd: "You don't have any apps yet. Click New to get started.",
    name: "Name",
    type: "Type",
    creator: "Created by",
    lastModified: "Last modified",
    deleteTime: "Delete time",
    createTime: "Create time",
    datasourceName: "Data source name",
    databaseName: "Database name",
    nameCheckMessage: "The name cannot be empty",
    deleteElementTitle: "Delete permanently",
    moveToTrashSubTitle: "{type} {name} will be moved to trash.",
    deleteElementSubTitle: "Delete {type} {name} permanently, it cannot be recovered.",
    deleteSuccessMsg: "Deleted successfully",
    deleteErrorMsg: "Deleted error",
    recoverSuccessMsg: "Recovered successfully",
    newDatasource: "New data source",
    creating: "Creating...",
    chooseDataSourceType: "Choose data source type",
    folderAlreadyExists: "The folder already exists",
    newNavLayout: "{userName}'s {name} ",
    newApp: "{userName}'s new {name} ",
    importError: "Import error, {message}",
    exportError: "Export error, {message}",
    importSuccess: "Import success",
    fileUploadError: "File upload error",
    fileFormatError: "File format error",
    groupWithSquareBrackets: "[Group] ",
    allPermissions: "Owner",
    shareLink: "Share link: ",
    copyLink: "Copy link",
    appPublicMessage: "Make the app public. Anyone can view.",
    modulePublicMessage: "Make the module public. Anyone can view.",
    memberPermissionList: "Member permissions: ",
    orgName: "{orgName} admins",
    addMember: "Add members",
    addPermissionPlaceholder: "Please enter a name to search members",
    searchMemberOrGroup: "Search for members or groups: ",
    addPermissionErrorMessage: "Failed to add permission, {message}",
    copyModalTitle: 'Clone "{name}"',
    copyNameLabel: "{type} name",
    copyModalfolderLabel: "Add to folder",
    copyNamePlaceholder: "Please enter a {type} name",
    chooseNavType: "Please choose navigation type",
    createNavigation: "Create Navigation",
  },
  carousel: {
    dotPosition: "Dots position",
    autoPlay: "AutoPlay",
    showDots: "Show dots",
  },
  npm: {
    invalidNpmPackageName: "Invalid npm package name or url.",
    pluginExisted: "This npm plugin already existed",
    compNotFound: "Component {compName} not found.",
    addPluginModalTitle: "Add npm plugin",
    pluginNameLabel: "npm package's URL or name",
    noCompText: "No components.",
    compsLoading: "Loading...",
    removePluginBtnText: "Remove",
    addPluginBtnText: "Add npm plugin",
  },
  toggleButton: {
    valueDesc: "The default value of the toggle button, for example: false",
    trueDefaultText: "Hide",
    falseDefaultText: "Show",
    trueLabel: "Text for true",
    falseLabel: "Text for false",
    trueIconLabel: "Icon for true",
    falseIconLabel: "Icon for false",
    iconPosition: "Icon position",
    showText: "Show text",
    alignment: "Alignment",
    showBorder: "Show border",
  },
  docUrls: {
    docHome: "https://docs.lowcoder.cloud/",
    components: "https://cloud.lowcoder.dev/components?n={compType}",
    module: "",
    optionList: "",
    terms: "",
    privacy: "",
    aboutUs: "",
    changeLog: "",
    introVideo: "",
    devNpmPlugin: "https://docs.lowcoder.cloud/lowcoder-extension/develop-data-source-plugins",
    devNpmPluginText: "How to develop npm plugin",
    useHost: "https://docs.lowcoder.cloud/setup-and-run/self-hosting/access-local-database-or-api",
    eventHandlerSlowdown:
      "https://docs.lowcoder.cloud/build-applications/app-interaction/event-handlers",
    thirdLib: "https://docs.lowcoder.cloud/lowcoder-extension/use-third-party-libraries-in-apps",
    thirdLibUrlText: "Use third-party libraries",
  },
  datasourceTutorial: {
    mysql: "",
    mongodb: "",
    postgres: "",
    redis: "",
    es: "",
    smtp: "",
    clickHouse: "",
  },
  queryTutorial: {
    js: "",
    transformer: "https://docs.lowcoder.cloud/business-logic-in-apps/write-javascript/transformers",
    tempState: "https://docs.lowcoder.cloud/business-logic-in-apps/write-javascript/temporary-state",
  },
  customComponent: {
    entryUrl: "https://sdk.lowcoder.cloud/custom_component.html",
  },
  template: {
    cloneUrl: "/apps/template-import/",
  },
  lowcoderUrl: {
    createIssue: "https://github.com/lowcoder-org/lowcoder/issues",
    discord: "https://discord.com/invite/qMG9uTmAx2",
  },
  componentDoc: {
    markdownDemoText:
      "**Lowcoder** is a _developer-friendly_ open-source low code platform to build internal apps within minutes.",
    demoText:
      "Lowcoder is a developer-friendly open-source low code platform to build internal apps within minutes.",
    submit: "Submit",
    style: "style",
    danger: "Danger",
    warning: "warning",
    success: "Success",
    menu: "menu",
    link: "Link",
    customAppearance: "Custom Appearance",
    search: "search",
    pleaseInputNumber: "Please enter a number",
    mostValue: "Most Value",
    maxRating: "Maximum Rating",
    notSelect: "Not Selected",
    halfSelect: "Half Selection",
    pleaseSelect: "Please select",
    title: "Title",
    content: "Content",
    componentNotFound: "Component does not exist",
    example: "Examples",
    defaultMethodDesc: "Set the value of property {name}",
    propertyUsage:
      "You can read component-related information by accessing component properties by component name anywhere you can write JavaScript.",
    property: "Properties",
    propertyName: "Property Name",
    propertyType: "Type",
    propertyDesc: "Description",
    event: "Events",
    eventName: "event name",
    eventDesc: "Description",
    mehtod: "Methods",
    methodUsage:
      "You can interact with components through their methods, and you can call them by their name anywhere you can write JavaScript. Or you can call them through the 'Control component' action of an event.",
    methodName: "Method Name",
    methodDesc: "Description",
    showBorder: "Show Border",
    haveTry: "Try it yourself",
    settings: "Setting",
    settingValues: "Setting value",
    defaultValue: "Default Value",
    time: "time",
    date: "date",
    noValue: "None",
    xAxisType: "X-axis type",
    hAlignType: "Horizontal Alignment",
    leftLeftAlign: "Left-left alignment",
    leftRightAlign: "Left-right alignment",
    topLeftAlign: "top-left alignment",
    topRightAlign: "top-right alignment",
    validation: "Validation",
    required: "Required",
    defaultStartDateValue: "Default Start Date",
    defaultEndDateValue: "Default End Date",
    basicUsage: "Basic Usage",
    basicDemoDescription: "The following examples show the basic usage of the component.",
    noDefaultValue: "No Default Value",
    forbid: "Forbidden",
    placeholder: "Placeholder",
    pleaseInputPassword: "Please enter a password",
    password: "password",
    textAlign: "Text Alignment",
    length: "Length",
    top: "Top",
    pleaseInputName: "Please enter your name",
    userName: "Name",
    fixed: "Fixed",
    responsive: "Responsive",
    workCount: "word count",
    cascaderOptions: `[\n {\n "value": "zhejiang",\n "label": "Zhejiang",\n "children": [\n {\n "value": "hangzhou",\n " label": "Hangzhou",\n "children": [\n {\n "value": "xihu",\n "label": "West Lake"\n }\n ]\n }\n ]\n },\n {\n "value": "jiangsu",\n "label": "Jiangsu",\n "children": [\n {\n "value": "nanjing",\n "label" : "Nanjing",\n "children": [\n {\n "value": "zhonghuamen",\n "label": "Zhonghuamen"\n }\n ]\n }\n ]\n } \n]`,
    pleaseSelectCity: "Please select a city",
    advanced: "Advanced",
    showClearIcon: "Show clear icon",
    /* eslint-disable only-ascii/only-ascii */
    appleOptionLabel: "🍎 Apple",
    waterMelonOptionLabel: "🍉 Watermelon",
    berryOptionLabel: "🍓 Strawberry",
    lemonOptionLabel: "🍋 Lemon",
    coconutOptionLabel: "🥥 Coconut",
    /* eslint-enable only-ascii/only-ascii */
    likedFruits: "Favorites",
    option: "option",
    singleFileUpload: "Single file upload",
    multiFileUpload: "Multiple file upload",
    folderUpload: "Folder Upload",
    multiFile: "multiple files",
    folder: "folder",
    open: "open",
    favoriteFruits: "Favorite Fruits",
    pleaseSelectOneFruit: "Select a fruit",
    notComplete: "not complete",
    complete: "Complete",
    echart: "EChart",
    lineChart: "line chart",
    basicLineChart: "Basic line chart",
    lineChartType: "Line chart type",
    stackLineChart: "Stacked line",
    areaLineChart: "Area line",
    scatterChart: "Scatter chart",
    scatterShape: "Scatter shape",
    scatterShapeCircle: "Circle",
    scatterShapeRect: "Rectangle",
    scatterShapeTri: "Triangle",
    scatterShapeDiamond: "diamond",
    scatterShapePin: "Pushpin",
    scatterShapeArrow: "Arrow",
    pieChart: "Pie Chart",
    basicPieChart: "Basic pie chart",
    pieChatType: "Pie Chart Type",
    pieChartTypeCircle: "Donut chart",
    pieChartTypeRose: "Rose chart",
    titleAlign: "Title position",
    color: "Color",
    dashed: "Dashed",
    imADivider: "I am a dividing line",
    tableSize: "Table size",
    subMenuItem: "SubMenu {num}",
    menuItem: "Menu {num}",
    labelText: "Label",
    labelPosition: "Label - Position",
    labelAlign: "Label - Align",
    optionsOptionType: "Configuration method",
    styleBackgroundColor: "Background color",
    styleBorderColor: "Border color",
    styleColor: "Font color",
    selectionMode: "Row selection mode",
    paginationSetting: "Pagination setting",
    paginationShowSizeChanger: "Support users to modify the number of entries per page",
    paginationShowSizeChangerButton: "Show size changer button",
    paginationShowQuickJumper: "Show quick jumper",
    paginationHideOnSinglePage: "Hide when there is only one page",
    paginationPageSizeOptions: "Page size",
    chartConfigCompType: "Chart type",
    xConfigType: "X axis type",
    loading: "Loading",
    disabled: "Disabled",
    minLength: "Minimum length",
    maxLength: "Maximum length",
    showCount: "Show word count",
    autoHeight: "Height",
    thousandsSeparator: "thousands separator",
    precision: "Decimal places",
    value: "Default value",
    formatter: "Format",
    min: "Minimum value",
    max: "Maximum value",
    step: "Step size",
    start: "Start time",
    end: "End time",
    allowHalf: "Allow half selection",
    filetype: "File type",
    showUploadList: "Show upload list",
    uploadType: "Upload Type",
    allowClear: "Show clear icon",
    minSize: "Minimum file size",
    maxSize: "Maximum file size",
    maxFiles: "Maximum number of uploaded files",
    format: "Format",
    minDate: "Minimum date",
    maxDate: "Maximum date",
    minTime: "Minimum time",
    maxTime: "Maximum time",
    text: "Text",
    type: "Type",
    hideHeader: "Hide header",
    hideBordered: "Hide border",
    src: "Image URL",
    showInfo: "Display value",
    mode: "Mode",
    onlyMenu: "Only menu",
    horizontalAlignment: "Horizontal alignment",
    row: "Left",
    column: "Top",
    leftAlign: "Left alignment",
    rightAlign: "Right alignment",
    percent: "percentage",
    fixedHeight: "Fixed height",
    auto: "Adaptive",
    directory: "Folder",
    multiple: "Multiple files",
    singleFile: "Single File",
    manual: "Manual",
    default: "Default",
    small: "Small",
    middle: "Medium",
    large: "Large",
    single: "Single",
    multi: "Multiple",
    close: "Close",
    ui: "UI mode",
    line: "Line chart",
    scatter: "Scatter plot",
    pie: "Pie chart",
    basicLine: "Basic line chart",
    stackedLine: "Stacked line chart",
    areaLine: "area area map",
    basicPie: "Basic pie chart",
    doughnutPie: "Donut chart",
    rosePie: "Rose chart",
    category: "category axis",
    circle: "Circle",
    rect: "Rectangle",
    triangle: "Triangle",
    diamond: "Diamond",
    pin: "Pushpin",
    arrow: "Arrow",
    left: "Left",
    right: "Right",
    center: "Center",
    bottom: "Bottom",
    justify: "Justify both ends",
  },
  playground: {
    data: "Data",
    preview: "Preview",
    property: "Properties",
    console: "Console",
    executeMethods: "Execute methods",
    noMethods: "No methods.",
    methodParams: "Method params",
    methodParamsHelp:
      "Input method params use JSON, for example, you can set setValue's params with: [1] or 1",
  },
  calendar: {
    headerBtnBackground: "Button background",
    btnText: "Button text",
    title: "Title",
    selectBackground: "Selected background",
    events: "Events data",
    editable: "Editable",
    defaultDate: "Default date",
    defaultDateTooltip: "The date that the calendar initially displays",
    defaultView: "Default view",
    defaultViewTooltip: "The view that the calendar initially displays",
    showEventTime: "Show event times",
    showEventTimeTooltip: "Whether to display the time text of the event",
    showWeekends: "Show weekends",
    showAllDay: "Show all-day",
    showAllDayTooltip: "Whether to display the all-day slot in the week and day views",
    dayMaxEvents: "Day max events",
    dayMaxEventsTooltip:
      "The maximum number of events to display in the month view per day, with 0 being limited to the height of the cell",
    eventMaxStack: "Event max stack",
    eventMaxStackTooltip:
      "The maximum number of events to stack horizontally in the week and day views, with 0 being no limit",
    selectInterval: "The interval selected on the calendar",
    selectEvent: "Selected event",
    changeSet:
      "The event object changed by dragging in the calendar, the key is the eventId, and the value is the event",
    today: "Today",
    month: "Month",
    week: "Week",
    day: "Day",
    list: "List",
    monday: "Monday",
    tuesday: "Tuesday",
    wednesday: "Wednesday",
    thursday: "Thursday",
    friday: "Friday",
    saturday: "Saturday",
    sunday: "Sunday",
    startWeek: "Start from",
    creatEvent: "Create event",
    editEvent: "Edit event",
    eventName: "Event name",
    eventColor: "Event color",
    eventGroupId: "Group ID",
    groupIdTooltip:
      "Group ID is used to group different events, and events in the same group can be dragged and resized together.",
    more: "more",
    allDay: "All day",
    eventNameRequire: "Please enter Event name",
    eventId: "Event ID",
    eventIdRequire: "Please enter Event ID",
    eventIdTooltip: "Unique ID for each event",
    eventIdExist: "ID already exists",
    colorList: "Color list",
    colorListTooltip: "custom Color list for event color",
    year: "Year",
    scrollToTime: "scroll to time",
    scrollToTimeTooltip: "Scroll to the current moment",
  },
  componentDocExtra: {
    table,
  },
  idSource: {
    title: "ID Providers",
    form: "Email",
    pay: "Premium",
    enable: "Enable",
    unEnable: "Not Enabled",
    loginType: "Login type",
    status: "Status",
    desc: "Description",
    manual: "Address book:",
    syncManual: "Sync Address book",
    syncManualSuccess: "Sync succeeded",
    enableRegister: "Allow registration",
    saveBtn: "Save and enable",
    save: "Save",
    none: "None",
    formPlaceholder: "Please enter {label}",
    formSelectPlaceholder: "Please select the {label}",
    saveSuccess: "Saved successfully",
    dangerLabel: "Danger Zone",
    dangerTip:
      "Disabling this ID provider may result in some users being unable to log in. Proceed with caution.",
    disable: "Disable",
    disableSuccess: "Disabled successfully",
    encryptedServer: "-------- Encrypted on the server side --------",
    disableTip: "Tips",
    disableContent:
      "Disabling this ID provider may result in some users being unable to log in. Are you sure to proceed?",
    manualTip: "",
    lockTip: "The content is locked. To make changes, please click the{icon}to unlock.",
    lockModalContent:
      "Changing the 'ID attribute' field can have significant impacts on user identification. Please confirm that you understand the implications of this change before proceeding.",
    payUserTag: "Premium",
  },
  slotControl: {
    configSlotView: "Configure slot view",
  },
  //Added By Aqib Mirza
  jsonLottie: {
    lottieJson: "Lottie JSON",
    speed: "Speed",
    width: "Width",
    height: "Height",
    backgroundColor: "Background color",
    animationStart: "Animation Start",
    valueDesc: "Current json Data",
    loop: "Loop",
    auto: 'auto',
    onHover: "On hover",
    singlePlay: "Single Play",
    endlessLoop: "Endless Loop",
    keepLastFrame: "Keep Last Frame",
  },
  /////////////////////
  timeLine: {
    titleColor: "title Color",
    subTitleColor: "subTitle Color",
    lableColor: "lable Color",
    value: "value",
    mode: "mode",
    left: "Left",
    right: "Right",
    alternate: "alternate",
    modeTooltip: "Set the content to appear left/right or alternately on both sides of the timeline",
    reverse: "reverse",
    pending: "pending",
    defaultPending: "continuous improvement",
    clickTitleEvent: "clickTitleEvent",
    clickTitleEventDesc: "click Title Event",
    Introduction: "Introduction keys",
    helpTitle: "title of timeline(Required)",
    helpsubTitle: "subtitle of timeline",
    helpLabel: "label of timeline,be used to display dates",
    helpColor: "Indicates timeline node color",
    helpDot: "Rendering Timeline Nodes as Ant Design Icons",
    helpTitleColor: "Individually control the color of node title",
    helpSubTitleColor: "Individually control the color of node subtitle",
    helpLableColor: "Individually control the color of node icon",
    valueDesc: "data of timeline",
    clickedObjectDesc: "clicked item data",
    clickedIndexDesc: "clicked item index",
    offset: "offset(%)",
    offsetDes: "In left and right mode, set the timeline offset",
    scrollTo: "Control scrollbar scrolling",
  },
  mention:{
    mentionList: "mention list",
  },
  comment: {
    value: "comment list data",
    showSendButton: "Allowing Comments",
    title: "title",
    titledDefaultValue: "%d comment in total",
    placeholder: "shift + enter to comment;Enter @ or # for quick input",
    placeholderDec: "placeholder",
    buttonTextDec: "button title",
    buttonText: "comment",
    mentionList: "mention list data",
    mentionListDec: "key-Mention keywords;value-Mention list data",
    userInfo: "user info",
    dateErr: "date error",
    commentList: "comment list",
    deletedItem: "deleted item",
    submitedItem: "submited item",
    deleteAble: "show delete button",
    Introduction: "Introduction keys",
    helpUser: "user info(Required)",
    helpname: "user name(Required)",
    helpavatar: "avatar url(high priority)",
    helpdisplayName: "display name(low priority)",
    helpvalue: "Comment content",
    helpcreatedAt: "create date",
  },
  autoComplete: {
    value: "auto complete value",
    checkedValueFrom: "checked value from",
    ignoreCase: "search ignore case",
    searchLabelOnly: "search label only",
    searchFirstPY: "search first pinying",
    searchCompletePY: "search complete pinying",
    searchText: "search text",
    SectionDataName: "autoComplete Data",
    valueInItems: "value in items",
    type: "type",
    antDesign: "AntDesign",
    normal: "Normal",
    selectKey: 'key',
    selectLable: 'label',
    ComponentType: 'Component Type',
    colorIcon: 'blue',
    grewIcon: 'grew',
    noneIcon: 'none',
    small: 'small',
    large: "large",
    componentSize: "component size",
    Introduction: "Introduction keys",
    helpLabel: "label",
    helpValue: "value",
  },
  responsiveLayout: {
    column: "Columns",
    atLeastOneColumnError: "Responsive layout keeps at least one Column",
    columnsPerRow: "Columns per Row",
    columnsSpacing: "Columns Spacing (px)",
    horizontal: "Horizontal",
    vertical: "Vertical",
    mobile: "Mobile",
    tablet: "Tablet",
    desktop: "Desktop",
    rowStyle: "Row Style",
    columnStyle: "Column Style",
    minWidth: "Min. Width",
    rowBreak: "Row Break",
    matchColumnsHeight: "Match Columns Height",
    rowLayout: "Row Layout",
    columnsLayout: "Columns Layout",
  },
  iconComp: {
    icon: "icon",
    autoSize: "icon AutoSize",
    iconSize: "icon size",
  },
  weekPickerComp: {
    format: "YYYY-wo",
  },
  monthPickerComp: {
    format: "YYYY-mm",
  },
  avatarComp: {
    square: "square",
    circle: "circle",
    icon: "icon",
    shape: "shape",
    counts: "Badge",
    cursorPointer: "cursor Pointer",
    title: "title",
    src: "src",
    avatarCompTooltip: "The rendering order is: images ->characters ->icon",
  },
  descriptions: {
    horizontal: "Horizontal",
    vertical: "Vertical",
    title: "title",
    small: "small",
    middle: "middle",
    default: "large",
    value: "content",
    showbordered: "show Bordered",
    showEditButton: "show EditButton",
    parseEnter: "parse Enter",
    layout: "Layout method",
    size: "row Size",
    columnCount: "columns per row",
    edit: "edit",
    editDesc: "Component cannot be edited, but click event can be activated",
  }
};
