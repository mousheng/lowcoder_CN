// vite.config.mts
import dotenv from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/dotenv/lib/main.js";
import { defineConfig } from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/vite/dist/node/index.js";
import react from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/@vitejs/plugin-react/dist/index.mjs";
import viteTsconfigPaths from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/vite-tsconfig-paths/dist/index.mjs";
import svgrPlugin from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/vite-plugin-svgr/dist/index.mjs";
import checker from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/vite-plugin-checker/dist/esm/main.js";
import { visualizer } from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
import path from "path";
import chalk from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/chalk/source/index.js";
import { createHtmlPlugin } from "file:///Users/raheeliftikhar/work/lowcoder-new/client/node_modules/vite-plugin-html/dist/index.mjs";

// src/dev-utils/util.js
function ensureLastSlash(str) {
  if (!str) {
    return "/";
  }
  if (!str.endsWith("/")) {
    return `${str}/`;
  }
  return str;
}

// src/dev-utils/buildVars.js
var buildVars = [
  {
    name: "PUBLIC_URL",
    defaultValue: "/"
  },
  {
    name: "REACT_APP_EDITION",
    defaultValue: "community"
  },
  {
    name: "REACT_APP_LANGUAGES",
    defaultValue: ""
  },
  {
    name: "REACT_APP_COMMIT_ID",
    defaultValue: "00000"
  },
  {
    name: "REACT_APP_API_HOST",
    defaultValue: ""
  },
  {
    name: "LOWCODER_NODE_SERVICE_URL",
    defaultValue: ""
  },
  {
    name: "REACT_APP_ENV",
    defaultValue: "production"
  },
  {
    name: "REACT_APP_BUILD_ID",
    defaultValue: ""
  },
  {
    name: "REACT_APP_LOG_LEVEL",
    defaultValue: "error"
  },
  {
    name: "REACT_APP_IMPORT_MAP",
    defaultValue: "{}"
  },
  {
    name: "REACT_APP_SERVER_IPS",
    defaultValue: ""
  },
  {
    name: "REACT_APP_BUNDLE_BUILTIN_PLUGIN",
    defaultValue: ""
  },
  {
    name: "REACT_APP_BUNDLE_TYPE",
    defaultValue: "app"
  },
  {
    name: "REACT_APP_DISABLE_JS_SANDBOX",
    defaultValue: ""
  }
];

// src/dev-utils/external.js
var libs = [
  "axios",
  "redux",
  "react-router",
  "react-router-dom",
  "react-redux",
  "react",
  "react-dom",
  "lodash",
  "history",
  "antd",
  "@dnd-kit/core",
  "@dnd-kit/modifiers",
  "@dnd-kit/sortable",
  "@dnd-kit/utilities",
  {
    name: "moment",
    extractDefault: true
  },
  {
    name: "dayjs",
    extractDefault: true
  },
  {
    name: "lowcoder-sdk",
    from: "./src/index.sdk.ts"
  },
  {
    name: "styled-components",
    mergeDefaultAndNameExports: true
  }
];
var getLibGlobalVarName = (name) => {
  return "$" + name.replace(/@/g, "$").replace(/[\/\-]/g, "_");
};
var libsImportCode = (exclude = []) => {
  const importLines = [];
  const assignLines = [];
  libs.forEach((i) => {
    let name = i;
    let merge = false;
    let from = name;
    let extractDefault = false;
    if (typeof i === "object") {
      name = i.name;
      merge = i.mergeDefaultAndNameExports ?? false;
      from = i.from ?? name;
      extractDefault = i.extractDefault ?? false;
    }
    if (exclude.includes(name)) {
      return;
    }
    const varName = getLibGlobalVarName(name);
    if (merge) {
      importLines.push(`import * as ${varName}_named_exports from '${from}';`);
      importLines.push(`import ${varName} from '${from}';`);
      assignLines.push(`Object.assign(${varName}, ${varName}_named_exports);`);
    } else if (extractDefault) {
      importLines.push(`import ${varName} from '${from}';`);
    } else {
      importLines.push(`import * as ${varName} from '${from}';`);
    }
    assignLines.push(`window.${varName} = ${varName};`);
  });
  return importLines.concat(assignLines).join("\n");
};

// src/dev-utils/globalDepPlguin.js
function globalDepPlugin(exclude = []) {
  const virtualModuleId = "virtual:globals";
  return {
    name: "lowcoder-global-plugin",
    resolveId(id) {
      if (id === virtualModuleId) {
        return id;
      }
    },
    load(id) {
      if (id === virtualModuleId) {
        return libsImportCode(exclude);
      }
    }
  };
}

// vite.config.mts
var __vite_injected_original_dirname = "/Users/raheeliftikhar/work/lowcoder-new/client/packages/lowcoder";
dotenv.config();
var apiProxyTarget = process.env.LOWCODER_API_SERVICE_URL;
var nodeServiceApiProxyTarget = process.env.NODE_SERVICE_API_PROXY_TARGET;
var nodeEnv = process.env.NODE_ENV ?? "development";
var edition = process.env.REACT_APP_EDITION;
var isEEGlobal = edition === "enterprise-global";
var isEE = edition === "enterprise" || isEEGlobal;
var isDev = nodeEnv === "development";
var isVisualizerEnabled = !!process.env.ENABLE_VISUALIZER;
var browserCheckFileName = `browser-check.js`;
var base = ensureLastSlash(process.env.PUBLIC_URL);
if (!apiProxyTarget && isDev) {
  console.log();
  console.log(chalk.red`LOWCODER_API_SERVICE_URL is required.\n`);
  console.log(chalk.cyan`Start with command: LOWCODER_API_SERVICE_URL=\{backend-api-addr\} yarn start`);
  console.log();
  process.exit(1);
}
var proxyConfig = {
  "/api": {
    target: apiProxyTarget,
    changeOrigin: false
  }
};
if (nodeServiceApiProxyTarget) {
  proxyConfig["/node-service"] = {
    target: nodeServiceApiProxyTarget
  };
}
var define = {};
buildVars.forEach(({ name, defaultValue }) => {
  define[name] = JSON.stringify(process.env[name] || defaultValue);
});
var viteConfig = {
  define,
  assetsInclude: ["**/*.md"],
  resolve: {
    extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json"],
    alias: {
      "@lowcoder-ee": path.resolve(
        __vite_injected_original_dirname,
        isEE ? `../lowcoder/src/${isEEGlobal ? "ee-global" : "ee"}` : "../lowcoder/src"
      )
    }
  },
  base,
  build: {
    manifest: true,
    target: "es2015",
    cssTarget: "chrome63",
    outDir: "build",
    assetsDir: "static",
    emptyOutDir: false,
    rollupOptions: {
      output: {
        chunkFileNames: "[hash].js"
      }
    },
    commonjsOptions: {
      defaultIsModuleExports: (id) => {
        if (id.indexOf("antd/lib") !== -1) {
          return false;
        }
        return "auto";
      }
    }
  },
  css: {
    preprocessorOptions: {
      less: {
        modifyVars: {
          "@primary-color": "#3377FF",
          "@link-color": "#3377FF",
          "@border-color-base": "#D7D9E0",
          "@border-radius-base": "4px"
        },
        javascriptEnabled: true
      }
    }
  },
  server: {
    open: true,
    cors: true,
    port: 8e3,
    host: "0.0.0.0",
    proxy: proxyConfig
  },
  plugins: [
    checker({
      typescript: true,
      eslint: {
        lintCommand: 'eslint --quiet "./src/**/*.{ts,tsx}"',
        dev: {
          logLevel: ["error"]
        }
      }
    }),
    react({
      babel: {
        parserOpts: {
          plugins: ["decorators-legacy"]
        }
      }
    }),
    viteTsconfigPaths({
      projects: ["../lowcoder/tsconfig.json", "../lowcoder-design/tsconfig.json"]
    }),
    svgrPlugin({
      svgrOptions: {
        exportType: "named",
        prettier: false,
        svgo: false,
        titleProp: true,
        ref: true
      }
    }),
    globalDepPlugin(),
    createHtmlPlugin({
      minify: true,
      inject: {
        data: {
          browserCheckScript: isDev ? "" : `<script src="${base}${browserCheckFileName}"></script>`
        }
      }
    }),
    isVisualizerEnabled && visualizer()
  ].filter(Boolean)
};
var browserCheckConfig = {
  ...viteConfig,
  define: {
    ...viteConfig.define,
    "process.env.NODE_ENV": JSON.stringify("production")
  },
  build: {
    ...viteConfig.build,
    manifest: false,
    copyPublicDir: false,
    emptyOutDir: true,
    lib: {
      formats: ["iife"],
      name: "BrowserCheck",
      entry: "./src/browser-check.ts",
      fileName: () => {
        return browserCheckFileName;
      }
    }
  }
};
var buildTargets = {
  main: viteConfig,
  browserCheck: browserCheckConfig
};
var buildTarget = buildTargets[process.env.BUILD_TARGET || "main"];
var vite_config_default = defineConfig(buildTarget || viteConfig);
export {
  vite_config_default as default,
  viteConfig
};
//# sourceMappingURL=data:application/json;base64,
